[{"path":"http://jepusto.github.io/clubSandwich/articles/Wald-tests-in-clubSandwich.html","id":"the-wald-test-function","dir":"Articles","previous_headings":"","what":"The Wald test function","title":"Wald tests of multiple-constraint null hypotheses","text":"Wald_test() function can used conduct hypothesis tests involve multiple constraints regression coefficients. Consider linear model outcome \\(Y_{ij}\\) regressed \\(1 \\times p\\) row vector predictors \\(\\mathbf{x}_{ij}\\) (might include constant intercept term): \\[ Y_{ij} = \\mathbf{x}_{ij} \\boldsymbol\\beta + \\epsilon_{ij} \\] regression coefficient vector \\(\\boldsymbol\\beta\\). quite general terms, set constraints regression coefficient vector can expressed terms \\(q \\times p\\) matrix \\(\\mathbf{C}\\), row \\(\\mathbf{C}\\) corresponds one constraint. joint null hypothesis \\(H_0: \\mathbf{C} \\boldsymbol\\beta = \\mathbf{0}\\), \\(\\mathbf{0}\\) \\(q \\times 1\\) vector zeros.1 Wald-type test based test statistic \\[ Q = \\left(\\mathbf{C}\\boldsymbol{\\hat\\beta}\\right)' \\left(\\mathbf{C} \\mathbf{V}^{CR} \\mathbf{C}'\\right)^{-1} \\left(\\mathbf{C}\\boldsymbol{\\hat\\beta}\\right), \\] \\(\\boldsymbol{\\hat\\beta}\\) estimated regression coefficient vector \\(\\mathbf{V}^{CR}\\) cluster-robust variance matrix. number clusters sufficiently large, distribution \\(Q\\) null hypothesis approximately \\(\\chi^2(q)\\). Tipton & Pustejovsky (2015) investigated wide range approximations null distribution \\(Q\\), many included options Wald_test(). Based large simulation, (…er……) recommended method called “approximate Hotelling’s \\(T^2\\)-Z” test, “AHZ.” test approximates distribution \\(Q / q\\) \\(T^2\\) distribution, multiple \\(F\\) distribution, numerator degrees freedom \\(q\\) denominator degrees freedom based generalization Satterthwaite approximation. Wald_test() function three main arguments: obj argument used specify estimated regression model perform test, constraints argument \\(\\mathbf{C}\\) matrix expressing set constraints test, vcov argument cluster-robust variance matrix, used construct test statistic. (Alternately, vcov can type cluster-robust variance matrix construct, case computed internally.) default, Wald_test() use HTZ small-sample approximation. options available (via test argument) recommended routine use. optional tidy argument demonstrated .","code":"args(Wald_test) ## function (obj, constraints, vcov, test = \"HTZ\", tidy = FALSE,  ##     ...)  ## NULL"},{"path":"http://jepusto.github.io/clubSandwich/articles/Wald-tests-in-clubSandwich.html","id":"testing-treatment-effects","dir":"Articles","previous_headings":"The Wald test function","what":"Testing treatment effects","title":"Wald tests of multiple-constraint null hypotheses","text":"Returning STAR data, let’s suppose want examine differences math performance across class sizes. can done simple linear regression model, clustering standard errors schoolidk. estimating equation \\[ \\left(\\text{Math}\\right)_{ij} = \\beta_0 + \\beta_1 \\left(\\text{small}\\right)_{ij} + \\beta_2 \\left(\\text{aide}\\right)_{ij} + e_{ij}, \\] can estimated R follows: estimating equation, coefficients \\(\\beta_1\\) \\(\\beta_2\\) represent treatment effects, differences average math scores relative reference level stark, case regular-size class. t-statistics p-values reported coef_test separate tests null hypotheses coefficients equal zero, meaning difference specified treatment condition reference level. might want instead test joint null hypothesis differences among conditions. null can expressed set multiple constraints parameters: \\(\\beta_1 = 0\\) \\(\\beta_2 = 0\\). test null hypothesis \\(\\beta_1 = \\beta_2 = 0\\) based treatment effects model specification, can use: result includes details form test computed, \\(F\\)-statistic, numerator denominator degrees freedom used compute reference distribution, \\(p\\)-value corresponding specified null hypothesis. example, \\(p = 0.000141\\), can rule null hypothesis differences math performance across conditions. representation null hypotheses arbitrary constraint matrices useful developing theory test hypotheses, helpful actually running tests—constructing constraint matrices “hand” just cumbersome exercise. Moreover, \\(\\mathbf{C}\\) matrices typically follow one small number patterns. Two common use cases ) constraining set \\(q > 1\\) parameters equal zero b) constraining set \\(q + 1\\) parameters equal common value. clubSandwich package now includes set helper functions create constraint matrices common use cases.","code":"lm_trt <- lm(math1 ~ stark, data = STAR) V_trt <- vcovCR(lm_trt, cluster = STAR$schoolidk, type = \"CR2\") coef_test(lm_trt, vcov = V_trt) ##        Coef. Estimate   SE  t-stat d.f. (Satt) p-val (Satt) Sig. ##  (Intercept)  531.727 2.78 191.506        59.9       <0.001  *** ##   starksmall    9.469 2.30   4.114        65.6       <0.001  *** ##    starkaide   -0.483 1.86  -0.259        65.6        0.796 C_trt <- matrix(c(0,0,1,0,0,1), 2, 3) C_trt ##      [,1] [,2] [,3] ## [1,]    0    1    0 ## [2,]    0    0    1 Wald_test(lm_trt, constraints = C_trt, vcov = V_trt) ##  test Fstat df_num df_denom  p_val sig ##   HTZ  10.2      2     65.3 <0.001 ***"},{"path":"http://jepusto.github.io/clubSandwich/articles/Wald-tests-in-clubSandwich.html","id":"constrain_zero","dir":"Articles","previous_headings":"The Wald test function","what":"constrain_zero()","title":"Wald tests of multiple-constraint null hypotheses","text":"constrain set \\(q\\) regression coefficients equal zero, simplest form \\(\\mathbf{C}\\) matrix consist set \\(q\\) rows, single entry row equal 1 remaining entries zero. lm_trt model, C matrix look like : \\[ \\mathbf{C} = \\left[\\begin{array}{ccc} 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{array} \\right], \\] \\[ \\mathbf{C}\\boldsymbol\\beta = \\left[\\begin{array}{ccc} 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{array} \\right] \\left[\\begin{array}{c} \\beta_0 \\\\ \\beta_1 \\\\ \\beta_2 \\end{array} \\right] = \\left[\\begin{array}{c} \\beta_1 \\\\ \\beta_2 \\end{array} \\right], \\] set equal \\(\\left[\\begin{array}{c} 0 \\\\ 0 \\end{array} \\right]\\). constrain_zero() function create matrices like automatically. function takes two main arguments: constraints argument used specify coefficients regression model set equal zero. coefs argument set estimated regression coefficients, calculate constraints. Constraints can specified position index, name, via regular expression. test joint null hypothesis average math performance equal across three treatment conditions, need constrain second third coefficients zero: equivalently: Note constraints regular expression, reg_ex argument needs set TRUE. result constrain_zero() can fed Wald_test() function: reduce redundancy syntax, can also omit coefs argument constrain_zero, long call inside Wald_test2:","code":"args(constrain_zero) ## function (constraints, coefs, reg_ex = FALSE)  ## NULL constrain_zero(2:3, coefs = coef(lm_trt)) ##      [,1] [,2] [,3] ## [1,]    0    1    0 ## [2,]    0    0    1 constrain_zero(c(\"starksmall\",\"starkaide\"), coefs = coef(lm_trt)) ##      [,1] [,2] [,3] ## [1,]    0    1    0 ## [2,]    0    0    1 constrain_zero(\"^stark\", coefs = coef(lm_trt), reg_ex = TRUE) ##      [,1] [,2] [,3] ## [1,]    0    1    0 ## [2,]    0    0    1 C_trt <- constrain_zero(2:3, coefs = coef(lm_trt)) Wald_test(lm_trt, constraints = C_trt, vcov = V_trt) ##  test Fstat df_num df_denom  p_val sig ##   HTZ  10.2      2     65.3 <0.001 *** Wald_test(lm_trt, constraints = constrain_zero(2:3), vcov = V_trt) ##  test Fstat df_num df_denom  p_val sig ##   HTZ  10.2      2     65.3 <0.001 ***"},{"path":"http://jepusto.github.io/clubSandwich/articles/Wald-tests-in-clubSandwich.html","id":"constrain_equal","dir":"Articles","previous_headings":"The Wald test function","what":"constrain_equal()","title":"Wald tests of multiple-constraint null hypotheses","text":"Another common type constraints involve setting set \\(q + 1\\) regression coefficients equal common (unknown) value (\\(q + 1\\) takes \\(q\\) constraints ). many equivalent ways express set constraints terms \\(\\mathbf{C}\\) matrix. One fairly simple form consists set \\(q\\) rows, entry corresponding one coefficients interest equal -1 entry corresponding another coefficient interest equal 1. see works, let’s look different way parameterizing simple model STAR data, using separate intercepts treatment condition. estimating equation \\[ \\left(\\text{Math}\\right)_{ij} = \\beta_0 \\left(\\text{regular}\\right)_{ij} + \\beta_1 \\left(\\text{small}\\right)_{ij} + \\beta_2 \\left(\\text{aide}\\right)_{ij} + e_{ij}. \\] model can estimated R dropping intercept term: parameterization, coefficients \\(\\beta_0\\), \\(\\beta_1\\), \\(\\beta_2\\) represent average math performance levels students treatment conditions. t-tests p-values now different interpretation pertain null hypothesis average performance level given condition equal zero. separate-intercepts model, joint null hypothesis performance levels equal across conditions amounts constraining intercepts equal : \\(\\beta_0 = \\beta_1\\) \\(\\beta_0 = \\beta_2\\) (note don’t need constraint \\(\\beta_1 = \\beta_2\\) implied first two). lm_sep model, separate intercepts \\(\\beta_0\\), \\(\\beta_1\\), \\(\\beta_2\\), C matrix look like : \\[ \\mathbf{C} = \\left[\\begin{array}{ccc} -1 & 1 & 0 \\\\ -1 & 0 & 1 \\end{array} \\right], \\] \\[ \\mathbf{C}\\boldsymbol\\beta = \\left[\\begin{array}{ccc} -1 & 1 & 0 \\\\ -1 & 0 & 1 \\end{array} \\right] \\left[\\begin{array}{c} \\beta_0 \\\\ \\beta_1 \\\\ \\beta_2 \\end{array} \\right] = \\left[\\begin{array}{c} \\beta_1 - \\beta_0 \\\\ \\beta_2 - \\beta_0 \\end{array} \\right], \\] set equal \\(\\left[\\begin{array}{c} 0 \\\\ 0 \\end{array} \\right]\\). constrain_equal() function create matrices like automatically, given set coefficients constrain. syntax identical constrain_zero(): test joint null hypothesis average math performance equal across three treatment conditions, can constrain three coefficients lm_sep equal: equivalently: Just constrain_zero, constraints regular expression, reg_ex argument needs set TRUE. constraint matrix can fed Wald_test(): equivalently: Note test results exactly equal tests based lm_trt constrain_zero(). ’re algebraically equivalent—just different ways parameterizing model constraints.","code":"lm_sep <- lm(math1 ~ 0 + stark, data = STAR) V_sep <- vcovCR(lm_sep, cluster = STAR$schoolidk, type = \"CR2\") coef_test(lm_sep, vcov = V_sep) ##         Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig. ##  starkregular      532 2.78    192        59.9       <0.001  *** ##    starksmall      541 2.89    187        65.0       <0.001  *** ##     starkaide      531 2.72    195        64.3       <0.001  *** args(constrain_equal) ## function (constraints, coefs, reg_ex = FALSE)  ## NULL constrain_equal(1:3, coefs = coef(lm_sep)) ##      [,1] [,2] [,3] ## [1,]   -1    1    0 ## [2,]   -1    0    1 constrain_equal(c(\"starkregular\",\"starksmall\",\"starkaide\"), coefs = coef(lm_sep)) ##      [,1] [,2] [,3] ## [1,]   -1    1    0 ## [2,]   -1    0    1 constrain_equal(\"^stark\", coefs = coef(lm_sep), reg_ex = TRUE) ##      [,1] [,2] [,3] ## [1,]   -1    1    0 ## [2,]   -1    0    1 C_sep <- constrain_equal(\"^stark\", coefs = coef(lm_sep), reg_ex = TRUE) Wald_test(lm_sep, constraints = C_sep, vcov = V_sep) ##  test Fstat df_num df_denom  p_val sig ##   HTZ  10.2      2     65.3 <0.001 *** Wald_test(lm_sep, constraints = constrain_equal(1:3), vcov = V_sep) ##  test Fstat df_num df_denom  p_val sig ##   HTZ  10.2      2     65.3 <0.001 ***"},{"path":"http://jepusto.github.io/clubSandwich/articles/Wald-tests-in-clubSandwich.html","id":"testing-an-interaction","dir":"Articles","previous_headings":"","what":"Testing an interaction","title":"Wald tests of multiple-constraint null hypotheses","text":"Let’s now consider functions can applied complex model. Suppose interested understanding whether effect small class consistent across schools different areas, areas categorized urban, suburban, rural. answer question, need test interaction urbanicity treatment condition. One estimating equation let us examine question : \\[ \\begin{aligned} \\left(\\text{Math}\\right)_{ij} &= \\beta_0 + \\beta_1 \\left(\\text{suburban}\\right)_{ij} + \\beta_2 \\left(\\text{rural}\\right)_{ij} \\\\ & \\quad + \\beta_3 \\left(\\text{small}\\right)_{ij} + \\beta_4 \\left(\\text{aide}\\right)_{ij} \\\\ & \\quad\\quad + \\beta_5 \\left(\\text{small}\\right)(\\text{suburban})_{ij} + \\beta_6 \\left(\\text{aide}\\right)(\\text{suburban})_{ij} \\\\ & \\quad\\quad\\quad + \\beta_{7} \\left(\\text{small}\\right)(\\text{rural})_{ij} + \\beta_{8} \\left(\\text{aide}\\right)(\\text{rural})_{ij} \\\\ & \\quad\\quad\\quad\\quad + \\mathbf{x}_{ij} \\boldsymbol\\gamma  + e_{ij}, \\end{aligned} \\] \\(\\mathbf{x}_{ij}\\) row vector student characteristics, included just make regression look fancier. specification, \\(\\beta_3\\) \\(\\beta_4\\) represent effects small class aide class, compared regular class, reference level urbanicity—case, urban schools. coefficients \\(\\beta_5, \\beta_6, \\beta_7, \\beta_8\\) represent interactions treatment condition urbanicity. ’s model, estimated R: specification, several different null hypotheses might want test. one, perhaps want see variation treatment effects across different levels urbanicity. can expressed null hypothesis four interaction terms zero, \\(H_{0A}: \\beta_5 = \\beta_6 = \\beta_7 = \\beta_8 = 0\\). Wald test: Another possibility might want focus variation effect small class regular class, ignoring whatever going aide class condition. , null hypothesis simply \\(H_{0B}: \\beta_5 = \\beta_6 = 0\\), tested :","code":"lm_urbanicity <- lm(math1 ~ schoolk * stark + gender + ethnicity + lunchk, data = STAR) V_urbanicity <- vcovCR(lm_urbanicity, cluster = STAR$schoolidk, type = \"CR2\") coef_test(lm_urbanicity, vcov = V_urbanicity) ##                       Coef. Estimate    SE  t-stat d.f. (Satt) p-val (Satt) ##                 (Intercept)   542.62  5.91 91.8599       21.70       <0.001 ##             schoolksuburban     2.77  6.76  0.4100       28.35       0.6849 ##                schoolkrural     1.03  6.38  0.1616       30.74       0.8727 ##                  starksmall     9.42  4.56  2.0649       17.10       0.0544 ##                   starkaide    -4.27  2.17 -1.9631       16.73       0.0665 ##                genderfemale     2.14  1.20  1.7773       67.14       0.0800 ##               ethnicityafam   -16.79  4.19 -4.0026       34.94       <0.001 ##              ethnicityasian    13.19 11.02  1.1963        6.23       0.2751 ##           ethnicityhispanic    39.23 20.62  1.9028        1.01       0.3067 ##              ethnicityother     8.86 18.78  0.4720        3.02       0.6690 ##                  lunchkfree   -19.37  2.04 -9.4848       57.38       <0.001 ##  schoolksuburban:starksmall     3.03  6.39  0.4746       28.94       0.6386 ##     schoolkrural:starksmall    -0.31  5.58 -0.0555       34.04       0.9560 ##   schoolksuburban:starkaide     5.10  3.72  1.3711       28.64       0.1810 ##      schoolkrural:starkaide     8.16  3.16  2.5857       34.30       0.0141 ##  Sig. ##   *** ##       ##       ##     . ##     . ##     . ##   *** ##       ##       ##       ##   *** ##       ##       ##       ##     * Wald_test(lm_urbanicity,            constraints = constrain_zero(\"schoolk.+:stark\", reg_ex = TRUE),           vcov = V_urbanicity) ##  test Fstat df_num df_denom p_val sig ##   HTZ  1.96      4     37.5 0.121 Wald_test(lm_urbanicity,            constraints = constrain_zero(\"schoolk.+:starksmall\", reg_ex = TRUE),           vcov = V_urbanicity) ##  test Fstat df_num df_denom p_val sig ##   HTZ 0.189      2     34.5 0.828"},{"path":"http://jepusto.github.io/clubSandwich/articles/Wald-tests-in-clubSandwich.html","id":"lists-of-constraints","dir":"Articles","previous_headings":"Testing an interaction","what":"Lists of constraints","title":"Wald tests of multiple-constraint null hypotheses","text":"models like urbanicity--treatment interaction specification, may need run multiple tests estimating equation. can accomplished Wald_test providing list constraints constraints argument. example, test hypotheses described creating list several constraint matrices passing Wald_test: Setting option tidy = TRUE arrange output tests single data frame: list constraints can also created inside Wald_test, coefs argument can omitted constrain_zero():","code":"C_list <- list(   `Any interaction` = constrain_zero(\"schoolk.+:stark\",                                       coef(lm_urbanicity), reg_ex = TRUE),   `Small vs regular` = constrain_zero(\"schoolk.+:starksmall\",                                        coef(lm_urbanicity), reg_ex = TRUE) )  Wald_test(lm_urbanicity,            constraints = C_list,           vcov = V_urbanicity) ## $`Any interaction` ##  test Fstat df_num df_denom p_val sig ##   HTZ  1.96      4     37.5 0.121     ##  ## $`Small vs regular` ##  test Fstat df_num df_denom p_val sig ##   HTZ 0.189      2     34.5 0.828 Wald_test(lm_urbanicity,            constraints = C_list,           vcov = V_urbanicity,            tidy = TRUE) ##        hypothesis test Fstat df_num df_denom p_val sig ##   Any interaction  HTZ 1.960      4     37.5 0.121     ##  Small vs regular  HTZ 0.189      2     34.5 0.828 Wald_test(   lm_urbanicity,    constraints = list(     `Any interaction` = constrain_zero(\"schoolk.+:stark\", reg_ex = TRUE),     `Small vs regular` = constrain_zero(\"schoolk.+:starksmall\", reg_ex = TRUE)   ),   vcov = V_urbanicity,    tidy = TRUE ) ##        hypothesis test Fstat df_num df_denom p_val sig ##   Any interaction  HTZ 1.960      4     37.5 0.121     ##  Small vs regular  HTZ 0.189      2     34.5 0.828"},{"path":"http://jepusto.github.io/clubSandwich/articles/Wald-tests-in-clubSandwich.html","id":"pairwise-t-tests","dir":"Articles","previous_headings":"","what":"Pairwise t-tests","title":"Wald tests of multiple-constraint null hypotheses","text":"clubSandwich package also provides convenience function, constrain_pairwise() can used combination Wald_test() conduct pairwise comparisons among set regression coefficients. function differs two constrain_*() functions returns list constraint matrices, corresponds single linear combination covariates. Specifically, constrain_pairwise() function provides list constraints represent differences every possible pair among specified set coefficients. syntax similar constrain_*() functions. demonstrate, consider separate-intercepts specification simpler regression model: specification nice lets us simply read average outcomes group. However, naturally also want know whether differences groups, ’ll want compare small-class condition regular-size class condition, aide condition regular-size class condition, small-class condition aide condition. Thus, ’ll want comparisons among three coefficients: Feeding constraints Wald_test() gives us significance tests pair: first two tests equivalent tests treatment effect coefficients parameterization model. Indeed, denominator degrees freedom identical results coef_test(lm_trt, vcov = V_trt); Fstats equal squared t-statistics first model: important note p-values pairwise comparisons corrected multiplicity.3 now, please correct--using p.adjust() preferred method. Pairwise comparisons might also use model treatment--urbanicity interactions. ’s model results : Suppose interested effect small versus regular size classes, particular whether effect varies across schools different areas. coefficients schoolksuburban:starksmall schoolkrural:starksmall already give us differences treatment effects suburban schools versus urban schools rural schools versus urban schools. difference coefficients gives us difference treatment effects suburban schools rural schools. can look three contrasts using constrain_pairwise() setting option with_zero = TRUE: , results first two tests identical t-tests reported coef_test().","code":"coef_test(lm_sep, vcov = V_sep) ##         Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig. ##  starkregular      532 2.78    192        59.9       <0.001  *** ##    starksmall      541 2.89    187        65.0       <0.001  *** ##     starkaide      531 2.72    195        64.3       <0.001  *** C_pairs <- constrain_pairwise(1:3, coefs = coef(lm_sep)) C_pairs ## $`starksmall - starkregular` ##      [,1] [,2] [,3] ## [1,]   -1    1    0 ##  ## $`starkaide - starkregular` ##      [,1] [,2] [,3] ## [1,]   -1    0    1 ##  ## $`starkaide - starksmall` ##      [,1] [,2] [,3] ## [1,]    0   -1    1 Wald_test(lm_sep, constraints = C_pairs, vcov = V_sep, tidy = TRUE) ##                 hypothesis test   Fstat df_num df_denom  p_val sig ##  starksmall - starkregular  HTZ 16.9238      1     65.6 <0.001 *** ##   starkaide - starkregular  HTZ  0.0673      1     65.6  0.796     ##     starkaide - starksmall  HTZ 17.8137      1     66.9 <0.001 *** t_stats <- coef_test(lm_trt, vcov = V_trt)$tstat[2:3] F_stats <- Wald_test(lm_sep, constraints = C_pairs, vcov = V_sep, tidy = TRUE)$Fstat[1:2] all.equal(t_stats^2, F_stats) ## [1] TRUE coef_test(lm_urbanicity, vcov = V_urbanicity) ##                       Coef. Estimate    SE  t-stat d.f. (Satt) p-val (Satt) ##                 (Intercept)   542.62  5.91 91.8599       21.70       <0.001 ##             schoolksuburban     2.77  6.76  0.4100       28.35       0.6849 ##                schoolkrural     1.03  6.38  0.1616       30.74       0.8727 ##                  starksmall     9.42  4.56  2.0649       17.10       0.0544 ##                   starkaide    -4.27  2.17 -1.9631       16.73       0.0665 ##                genderfemale     2.14  1.20  1.7773       67.14       0.0800 ##               ethnicityafam   -16.79  4.19 -4.0026       34.94       <0.001 ##              ethnicityasian    13.19 11.02  1.1963        6.23       0.2751 ##           ethnicityhispanic    39.23 20.62  1.9028        1.01       0.3067 ##              ethnicityother     8.86 18.78  0.4720        3.02       0.6690 ##                  lunchkfree   -19.37  2.04 -9.4848       57.38       <0.001 ##  schoolksuburban:starksmall     3.03  6.39  0.4746       28.94       0.6386 ##     schoolkrural:starksmall    -0.31  5.58 -0.0555       34.04       0.9560 ##   schoolksuburban:starkaide     5.10  3.72  1.3711       28.64       0.1810 ##      schoolkrural:starkaide     8.16  3.16  2.5857       34.30       0.0141 ##  Sig. ##   *** ##       ##       ##     . ##     . ##     . ##   *** ##       ##       ##       ##   *** ##       ##       ##       ##     * Wald_test(lm_urbanicity,            constraints = constrain_pairwise(\":starksmall\", reg_ex = TRUE, with_zero = TRUE),           vcov = V_urbanicity,           tidy = TRUE) ##                                            hypothesis test   Fstat df_num ##                            schoolksuburban:starksmall  HTZ 0.22526      1 ##                               schoolkrural:starksmall  HTZ 0.00308      1 ##  schoolkrural:starksmall - schoolksuburban:starksmall  HTZ 0.36471      1 ##  df_denom p_val sig ##      28.9 0.639     ##      34.0 0.956     ##      24.4 0.551"},{"path":"http://jepusto.github.io/clubSandwich/articles/Wald-tests-in-clubSandwich.html","id":"remark","dir":"Articles","previous_headings":"","what":"Remark","title":"Wald tests of multiple-constraint null hypotheses","text":"preceding examples based ordinary linear regression models clustered standard errors. However, Wald_test() helper functions work identically models supporting clubSandwich methods, including nlme::lme(), nlme::gls(), lme4::lmer(), rma.uni(), rma.mv(), robu(), among others.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/articles/meta-analysis-with-CRVE.html","id":"robumeta-model","dir":"Articles","previous_headings":"","what":"robumeta model","title":"Meta-analysis with cluster-robust variance estimation","text":"Note robumeta produces small-sample corrected standard errors t-tests, need repeat calculations clubSandwich. eval variable four levels, might interest test whether average program effects differ degree evaluator independence. null hypothesis case 10th, 11th, 12th regression coefficients equal zero. small-sample adjusted F-test hypothesis can obtained follows. vcov = \"CR2\" option means standard errors corrected using bias-reduced linearization estimator described Tipton Pustejovsky (2015). default, Wald_test function provides F-type test degrees freedom estimated using approximate Hotelling’s \\(T^2_Z\\) method. test less 17 degrees freedom, even though 152 independent studies data, p-value quite significant conventional levels. low degrees freedom consequence fact one levels evaluator independence effect sizes :","code":"library(clubSandwich) library(robumeta) data(dropoutPrevention)  # clean formatting names(dropoutPrevention)[7:8] <- c(\"eval\",\"implement\") levels(dropoutPrevention$eval) <- c(\"independent\",\"indirect\",\"planning\",\"delivery\") levels(dropoutPrevention$implement) <- c(\"low\",\"medium\",\"high\") levels(dropoutPrevention$program_site) <- c(\"community\",\"mixed\",\"classroom\",\"school\") levels(dropoutPrevention$study_design) <- c(\"matched\",\"unmatched\",\"RCT\") levels(dropoutPrevention$adjusted) <- c(\"no\",\"yes\")  m3_robu <- robu(LOR1 ~ study_design + attrition + group_equivalence + adjusted                 + outcome + eval + male_pct + white_pct + average_age                 + implement + program_site + duration + service_hrs,                  data = dropoutPrevention, studynum = studyID, var.eff.size = varLOR,                  modelweights = \"HIER\") print(m3_robu) ## RVE: Hierarchical Effects Model with Small-Sample Corrections  ##  ## Model: LOR1 ~ study_design + attrition + group_equivalence + adjusted + outcome + eval + male_pct + white_pct + average_age + implement + program_site + duration + service_hrs  ##  ## Number of clusters = 152  ## Number of outcomes = 385 (min = 1 , mean = 2.53 , median = 1 , max = 30 ) ## Omega.sq = 0.24907  ## Tau.sq = 0.1024663  ##  ##                           Estimate   StdErr t-value  dfs    P(|t|>) 95% CI.L 95% CI.U Sig ## 1           X.Intercept.  0.016899 0.615399  0.0275 16.9 0.97841541 -1.28228  1.31608     ## 2  study_designunmatched -0.002626 0.185142 -0.0142 40.5 0.98875129 -0.37667  0.37141     ## 3        study_designRCT -0.086872 0.140044 -0.6203 38.6 0.53869676 -0.37024  0.19650     ## 4              attrition  0.118889 0.247228  0.4809 15.5 0.63732597 -0.40666  0.64444     ## 5      group_equivalence  0.502463 0.195838  2.5657 28.7 0.01579282  0.10174  0.90318  ** ## 6            adjustedyes -0.322480 0.125413 -2.5713 33.8 0.01470796 -0.57741 -0.06755  ** ## 7        outcomeenrolled  0.097059 0.139842  0.6941 16.5 0.49727848 -0.19862  0.39274     ## 8      outcomegraduation  0.147643 0.134938  1.0942 30.2 0.28253825 -0.12786  0.42315     ## 9  outcomegraduation.ged  0.258034 0.169134  1.5256 16.3 0.14632629 -0.10006  0.61613     ## 10          evalindirect -0.765085 0.399109 -1.9170  6.2 0.10212896 -1.73406  0.20389     ## 11          evalplanning -0.920874 0.346536 -2.6574  5.6 0.04027061 -1.78381 -0.05794  ** ## 12          evaldelivery -0.916673 0.304303 -3.0124  4.7 0.03212299 -1.71432 -0.11903  ** ## 13              male_pct  0.167965 0.181538  0.9252 16.4 0.36824526 -0.21609  0.55202     ## 14             white_pct  0.022915 0.149394  0.1534 21.8 0.87950385 -0.28704  0.33287     ## 15           average_age  0.037102 0.027053  1.3715 21.2 0.18458247 -0.01913  0.09333     ## 16       implementmedium  0.411779 0.128898  3.1946 26.7 0.00358205  0.14714  0.67642 *** ## 17         implementhigh  0.658570 0.123874  5.3164 34.6 0.00000635  0.40699  0.91015 *** ## 18     program_sitemixed  0.444384 0.172635  2.5741 28.6 0.01550504  0.09109  0.79768  ** ## 19 program_siteclassroom  0.426658 0.159773  2.6704 37.4 0.01115192  0.10303  0.75028  ** ## 20    program_siteschool  0.262517 0.160519  1.6354 30.1 0.11236814 -0.06525  0.59028     ## 21              duration  0.000427 0.000873  0.4895 36.7 0.62736846 -0.00134  0.00220     ## 22           service_hrs -0.003434 0.005012 -0.6852 36.7 0.49752503 -0.01359  0.00672     ## --- ## Signif. codes: < .01 *** < .05 ** < .10 * ## --- ## Note: If df < 4, do not trust the results Wald_test(m3_robu, constraints = constrain_zero(10:12), vcov = \"CR2\") ##  test Fstat df_num df_denom  p_val sig ##   HTZ  2.78      3     16.8 0.0732   . table(dropoutPrevention$eval) ##  ## independent    indirect    planning    delivery  ##           6          33          43         303"},{"path":"http://jepusto.github.io/clubSandwich/articles/meta-analysis-with-CRVE.html","id":"metafor-model","dir":"Articles","previous_headings":"","what":"metafor model","title":"Meta-analysis with cluster-robust variance estimation","text":"clubSandwich also works models fit using metafor package. re-fit regression specification, use REML estimate variance components (robumeta uses method--moments estimator), well somewhat different weighting scheme used robumeta. metafor produces model-based standard errors, t-tests, confidence intervals. coef_test function clubSandwich calculate robust standard errors robust t-tests coefficients: Note coef_test assumed cluster based studyID, outer-random effect metafor model. can specified explicitly including option cluster = dropoutPrevention$studyID call. F-test degree evaluator independence uses syntax : Despite differences weighting schemes, p-value close result obtained using robumeta.","code":"library(metafor) m3_metafor <- rma.mv(LOR1 ~ study_design + attrition + group_equivalence + adjusted                       + outcome + eval                       + male_pct + white_pct + average_age                       + implement + program_site + duration + service_hrs,                        V = varLOR, random = list(~ 1 | studyID, ~ 1 | studySample),                      data = dropoutPrevention) summary(m3_metafor) ##  ## Multivariate Meta-Analysis Model (k = 385; method: REML) ##  ##    logLik   Deviance        AIC        BIC       AICc  ​  ## -489.0357   978.0714  1026.0714  1119.5371  1029.6217    ##  ## Variance Components: ##  ##             estim    sqrt  nlvls  fixed       factor  ## sigma^2.1  0.2274  0.4769    152     no      studyID  ## sigma^2.2  0.1145  0.3384    317     no  studySample  ##  ## Test for Residual Heterogeneity: ## QE(df = 363) = 1588.4397, p-val < .0001 ##  ## Test of Moderators (coefficients 2:22): ## QM(df = 21) = 293.8694, p-val < .0001 ##  ## Model Results: ##  ##                        estimate      se     zval    pval    ci.lb    ci.ub     ​  ## intrcpt                  0.5296  0.7250   0.7304  0.4651  -0.8915   1.9506       ## study_designunmatched   -0.0494  0.1722  -0.2871  0.7741  -0.3870   0.2881       ## study_designRCT          0.0653  0.1628   0.4010  0.6884  -0.2538   0.3843       ## attrition               -0.1366  0.2429  -0.5623  0.5739  -0.6126   0.3395       ## group_equivalence        0.4071  0.1573   2.5877  0.0097   0.0988   0.7155   **  ## adjustedyes             -0.3581  0.1532  -2.3371  0.0194  -0.6585  -0.0578    *  ## outcomeenrolled         -0.2831  0.0771  -3.6709  0.0002  -0.4343  -0.1320  ***  ## outcomegraduation       -0.0913  0.0657  -1.3896  0.1646  -0.2201   0.0375       ## outcomegraduation/ged    0.6983  0.0805   8.6750  <.0001   0.5406   0.8561  ***  ## evalindirect            -0.7530  0.4949  -1.5214  0.1282  -1.7230   0.2171       ## evalplanning            -0.7700  0.4869  -1.5814  0.1138  -1.7242   0.1843       ## evaldelivery            -1.0016  0.4600  -2.1774  0.0294  -1.9033  -0.1000    *  ## male_pct                 0.1021  0.1715   0.5951  0.5518  -0.2341   0.4382       ## white_pct                0.1223  0.1804   0.6777  0.4979  -0.2313   0.4758       ## average_age              0.0061  0.0291   0.2091  0.8344  -0.0509   0.0631       ## implementmedium          0.4738  0.1609   2.9445  0.0032   0.1584   0.7892   **  ## implementhigh            0.6318  0.1471   4.2965  <.0001   0.3436   0.9201  ***  ## program_sitemixed        0.3289  0.2413   1.3631  0.1729  -0.1440   0.8019       ## program_siteclassroom    0.2920  0.1736   1.6821  0.0926  -0.0482   0.6321    .  ## program_siteschool       0.1616  0.1898   0.8515  0.3945  -0.2104   0.5337       ## duration                 0.0013  0.0009   1.3423  0.1795  -0.0006   0.0031       ## service_hrs             -0.0003  0.0047  -0.0654  0.9478  -0.0096   0.0090       ##  ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 coef_test(m3_metafor, vcov = \"CR2\") ##                  Coef.  Estimate       SE  t-stat d.f. (Satt) p-val (Satt) Sig. ##                intrcpt  0.529569 0.724851  0.7306       20.08      0.47347      ##  study_designunmatched -0.049434 0.204152 -0.2421       58.42      0.80952      ##        study_designRCT  0.065272 0.149146  0.4376       53.17      0.66342      ##              attrition -0.136575 0.306429 -0.4457       10.52      0.66485      ##      group_equivalence  0.407108 0.210917  1.9302       23.10      0.06595    . ##            adjustedyes -0.358124 0.136132 -2.6307       43.20      0.01176    * ##        outcomeenrolled -0.283124 0.237199 -1.1936        7.08      0.27108      ##      outcomegraduation -0.091295 0.091465 -0.9981        9.95      0.34188      ##  outcomegraduation/ged  0.698328 0.364882  1.9138        8.02      0.09188    . ##           evalindirect -0.752994 0.447670 -1.6820        6.56      0.13929      ##           evalplanning -0.769968 0.403898 -1.9063        6.10      0.10446      ##           evaldelivery -1.001648 0.355989 -2.8137        4.89      0.03834    * ##               male_pct  0.102055 0.148410  0.6877        9.68      0.50782      ##              white_pct  0.122255 0.141470  0.8642       16.88      0.39961      ##            average_age  0.006084 0.033387  0.1822       15.79      0.85772      ##        implementmedium  0.473789 0.148660  3.1871       22.44      0.00419   ** ##          implementhigh  0.631842 0.138073  4.5761       28.68      < 0.001  *** ##      program_sitemixed  0.328941 0.196848  1.6710       27.47      0.10607      ##  program_siteclassroom  0.291952 0.146014  1.9995       42.70      0.05195    . ##     program_siteschool  0.161640 0.171700  0.9414       29.27      0.35420      ##               duration  0.001270 0.000978  1.2988       31.96      0.20332      ##            service_hrs -0.000309 0.004828 -0.0641       49.63      0.94915 Wald_test(m3_metafor, constraints = constrain_zero(10:12), vcov = \"CR2\") ##  test Fstat df_num df_denom  p_val sig ##   HTZ  2.71      3     18.3 0.0753   ."},{"path":"http://jepusto.github.io/clubSandwich/articles/meta-analysis-with-CRVE.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Meta-analysis with cluster-robust variance estimation","text":"Fisher, Z., & Tipton, E. (2015). robumeta: R-package robust variance estimation meta-analysis. arXiv:1503.02220 Tipton, E. (2015). Small sample adjustments robust variance estimation meta-regression. Psychological Methods, 20(3), 375-393. https://doi.org/10.1037/met0000011 Tipton, E., & Pustejovsky, J. E. (2015). Small-sample adjustments tests moderators model fit using robust variance estimation meta-regression. Journal Educational Behavioral Statistics, 40(6), 604-634. https://doi.org/10.3102/1076998615606099 Viechtbauer, W. (2010). Conducting meta-analyses R metafor package. Journal Statistical Software, 36(3), 1-48. URL: https://doi.org/10.18637/jss.v036.i03 Wilson, S. J., Lipsey, M. W., Tanner-Smith, E., Huang, C. H., & Steinka-Fry, K. T. (2011). Dropout prevention intervention programs: Effects school completion dropout Among school-aged children youth: systematic review. Campbell Systematic Reviews, 7(1), 1-61. https://doi.org/10.4073/csr.2011.8","code":""},{"path":"http://jepusto.github.io/clubSandwich/articles/panel-data-CRVE.html","id":"effects-of-changing-the-minimum-legal-drinking-age","dir":"Articles","previous_headings":"","what":"Effects of changing the minimum legal drinking age","title":"Cluster-robust standard errors and hypothesis tests in panel data models","text":"Carpenter Dobkin (2011) analyzed effects changes minimum legal drinking age rates motor vehicle fatalities among 18-20 year olds, using state-level panel data National Highway Traffic Administration’s Fatal Accident Reporting System. new textbook, Angrist Pischke (2014) developed stylized example based Carpenter Dobkin’s work. following example uses Angrist Pischke’s data follows analysis data easily available. outcome incidence deaths motor vehicle crashes among 18-20 year-olds (per 100,000 residents), state plus District Columbia, period 1970 1983. several changes minimum legal drinking age time period, variability timing changes across states. Angrist Pischke (following Carpenter Dobkin) use difference--differences strategy estimate effects lowering minimum legal drinking age 21 18. specification \\[y_{} = \\alpha_i + \\beta_t + \\gamma b_{} + \\delta d_{} + \\epsilon_{},\\] \\(\\) = 1,…,51 \\(t\\) = 1970,…,1983. model, \\(\\alpha_i\\) state-specific fixed effect, \\(\\beta_t\\) year-specific fixed effect, \\(b_{}\\) current rate beer taxation state \\(\\) year \\(t\\), \\(d_{}\\) proportion 18-20 year-olds state \\(\\) year \\(t\\) legally allowed drink, \\(\\delta\\) captures effect shifting minimum legal drinking age 21 18. Following Angrist Pischke’s analysis, estimate model (unweighted) OLS weighted least squares weights corresponding population size given state year. also demonstrate random effects estimation implement cluster-robust Hausman specification test.","code":""},{"path":"http://jepusto.github.io/clubSandwich/articles/panel-data-CRVE.html","id":"unweighted-ols","dir":"Articles","previous_headings":"","what":"Unweighted OLS","title":"Cluster-robust standard errors and hypothesis tests in panel data models","text":"following code simple data-munging estimates model OLS: coef_test function clubSandwich can used test hypothesis changing minimum legal drinking age effect motor vehicle deaths cohort (.e., \\(H_0: \\delta = 0\\)). usual way test cluster standard errors state, calculate robust Wald statistic, compare standard normal reference distribution. code results follows: better approach use generalized, bias-reduced linearization CRVE, together Satterthwaite degrees freedom. clubSandwich package, BRL adjustment called “CR2” directly analogous HC2 correction used heteroskedasticity-robust variance estimation. applied OLS model estimated lm, default working model identity matrix, amounts “working” assumption errors uncorrelated homoskedastic. ’s apply approach example: Satterthwaite degrees freedom different coefficient model, coef_test function reports right alongside standard error. effect legal drinking age, degrees freedom half might expected, given 51 clusters. p-value CR2+Satterthwaite test twice large p-value based standard Wald test, although coefficient still statistically significant conventional levels. Note, however, degrees freedom beer taxation rate considerably smaller states substantial variability taxation rates time.","code":"library(clubSandwich) data(MortalityRates)  # subset for deaths in motor vehicle accidents, 1970-1983 MV_deaths <- subset(MortalityRates, cause==\"Motor Vehicle\" &                        year <= 1983 & !is.na(beertaxa))  # fit by OLS lm_unweighted <- lm(mrate ~ 0 + legal + beertaxa +                        factor(state) + factor(year), data = MV_deaths) coef_test(lm_unweighted, vcov = \"CR1\",            cluster = MV_deaths$state, test = \"naive-t\")[1:2,] ##     Coef. Estimate   SE t-stat d.f. (naive-t) p-val (naive-t) Sig. ##     legal     7.59 2.44  3.108             49         0.00313   ** ##  beertaxa     3.82 5.14  0.743             49         0.46128 coef_test(lm_unweighted, vcov = \"CR2\",            cluster = MV_deaths$state, test = \"Satterthwaite\")[1:2,] ##     Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig. ##     legal     7.59 2.51  3.019       24.58      0.00583   ** ##  beertaxa     3.82 5.27  0.725        5.77      0.49663"},{"path":"http://jepusto.github.io/clubSandwich/articles/panel-data-CRVE.html","id":"unweighted-within-estimation","dir":"Articles","previous_headings":"","what":"Unweighted “within” estimation","title":"Cluster-robust standard errors and hypothesis tests in panel data models","text":"plm package R provides another way estimate model. convenient absorbs state year fixed effects estimating effect legal. clubSandwich package works fitted plm models :","code":"library(plm) plm_unweighted <- plm(mrate ~ legal + beertaxa, data = MV_deaths,                        effect = \"twoways\", index = c(\"state\",\"year\")) coef_test(plm_unweighted, vcov = \"CR1\", cluster = \"individual\", test = \"naive-t\") ##     Coef. Estimate   SE t-stat d.f. (naive-t) p-val (naive-t) Sig. ##     legal     7.59 2.44  3.108             49         0.00313   ** ##  beertaxa     3.82 5.14  0.743             49         0.46128 coef_test(plm_unweighted, vcov = \"CR2\", cluster = \"individual\", test = \"Satterthwaite\") ##     Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig. ##     legal     7.59 2.51  3.019       24.58      0.00583   ** ##  beertaxa     3.82 5.27  0.725        5.77      0.49663"},{"path":"http://jepusto.github.io/clubSandwich/articles/panel-data-CRVE.html","id":"population-weighted-estimation","dir":"Articles","previous_headings":"","what":"Population-weighted estimation","title":"Cluster-robust standard errors and hypothesis tests in panel data models","text":"difference standard method new method terribly exciting example. However, things change quite bit model estimated using population weights. go back fitting lm dummies fixed effects plm handle weighted least squares. Using population weights slightly reduces point estimate effect, also slightly increasing precision. following standard approach, probably happy weighted estimates wouldn’t think . However, using CR2 variance estimator Satterthwaite correction produces p-value order magnitude larger (though still significant conventional 5% level). degrees freedom just 8.5—drastically smaller expected based number clusters. Even weights, coef_test function uses “independent, homoskedastic” working model default lm objects. present example, outcome standardized rate better assumption might error variances inversely proportional population size. following code uses alternate working model: new working model leads slightly smaller standard errors couple additional degrees freedom, though remain small-sample territory.","code":"lm_weighted <- lm(mrate ~ 0 + legal + beertaxa + factor(state) + factor(year),                    weights = pop, data = MV_deaths) coef_test(lm_weighted, vcov = \"CR1\",            cluster = MV_deaths$state, test = \"naive-t\")[1:2,] ##     Coef. Estimate   SE t-stat d.f. (naive-t) p-val (naive-t) Sig. ##     legal     7.78 2.01   3.87             49          <0.001  *** ##  beertaxa    11.16 4.20   2.66             49          0.0106    * coef_test(lm_weighted, vcov = \"CR2\",            cluster = MV_deaths$state, test = \"Satterthwaite\")[1:2,] ##     Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig. ##     legal     7.78 2.13   3.64        8.52      0.00588   ** ##  beertaxa    11.16 4.37   2.55        6.85      0.03854    * coef_test(lm_weighted, vcov = \"CR2\",            cluster = MV_deaths$state, target = 1 / MV_deaths$pop,            test = \"Satterthwaite\")[1:2,] ##     Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig. ##     legal     7.78 2.03   3.83       12.64      0.00221   ** ##  beertaxa    11.16 4.17   2.68        5.06      0.04333    *"},{"path":"http://jepusto.github.io/clubSandwich/articles/panel-data-CRVE.html","id":"random-effects-estimation","dir":"Articles","previous_headings":"","what":"Random effects estimation","title":"Cluster-robust standard errors and hypothesis tests in panel data models","text":"unobserved effects \\(\\alpha_1,...,\\alpha_{51}\\) uncorrelated regressors, efficient way estimate \\(\\gamma,\\delta\\) weighted least squares, weights based random effects model. still treat year effects fixed. random effects estimation, effect legal drinking age smaller 1 death per 100,000. procedural aside, note coef_test infers state clustering variable call plm includes one type effects (random state effects).","code":"plm_random <- plm(mrate ~ 0 + legal + beertaxa + year, data = MV_deaths,                    effect = \"individual\", index = c(\"state\",\"year\"),                   model = \"random\") coef_test(plm_random, vcov = \"CR1\", test = \"naive-t\")[1:2,] ##     Coef. Estimate   SE t-stat d.f. (naive-t) p-val (naive-t) Sig. ##     legal     7.31 2.39  3.054             49         0.00364   ** ##  beertaxa     3.37 5.11  0.661             49         0.51202 coef_test(plm_random, vcov = \"CR2\", test = \"Satterthwaite\")[1:2,] ##     Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig. ##     legal     7.31 2.46  2.966       25.18      0.00652   ** ##  beertaxa     3.37 5.22  0.647        5.78      0.54258"},{"path":"http://jepusto.github.io/clubSandwich/articles/panel-data-CRVE.html","id":"robust-hausman-test","dir":"Articles","previous_headings":"","what":"Robust Hausman test","title":"Cluster-robust standard errors and hypothesis tests in panel data models","text":"CRVE also used specification tests, artificial Hausman-type test endogeneity unobserved effects (Arellano, 1993). noted , random effects estimation efficient fixed effects estimation, requires assumption unobserved effects uncorrelated regressors. However, unobserved effects covary \\(\\mathbf{b}_i, \\mathbf{d}_i\\), random-effects estimator biased. can test whether endogeneity problem including group-centered covariates additional regressors. Let \\(\\tilde{d}_{} = d_{} - \\frac{1}{T}\\sum_t d_{}\\), \\(\\tilde{b}_{}\\) defined analogously. Now estimate regression \\[y_{} = \\beta_t + \\gamma_1 b_{} + \\gamma_2 \\tilde{b}_{} + \\delta_1 d_{} + \\delta_2 \\tilde{d}_{} + \\epsilon_{},\\] include state fixed effects. parameters \\(\\gamma_2,\\delta_2\\) represent differences within-groups -groups estimands \\(\\gamma_1, \\delta_1\\). zero, random effects estimator unbiased. Thus, joint test \\(H_0: \\gamma_2 = \\delta_2 = 0\\) amounts test exogeneity unobserved effects. efficiency, estimate specification using weighted least squares (although OLS valid ): conduct joint test centered covariates, can use Wald_test function. usual way test hypothesis use CR1 variance estimator calculate robust Wald statistic, use \\(\\chi^2_2\\) reference distribution (equivalently, compare re-scaled Wald statistic \\(F(2,\\infty)\\) distribution). Wald_test function reports latter version: test just shy significance 5% level. instead use CR2 variance estimator newly proposed approximate F-test (default Wald_test), get: low degrees freedom test indicate ’re definitely small-sample territory trust asymptotic \\(\\chi^2\\) approximation.","code":"MV_deaths <- within(MV_deaths, {   legal_cent <- legal - tapply(legal, state, mean)[factor(state)]   beer_cent <- beertaxa - tapply(beertaxa, state, mean)[factor(state)] })  plm_Hausman <- plm(mrate ~ 0 + legal + beertaxa + legal_cent + beer_cent + factor(year),                     data = MV_deaths,                    effect = \"individual\", index = c(\"state\",\"year\"),                    model = \"random\") coef_test(plm_Hausman, vcov = \"CR2\", test = \"Satterthwaite\")[1:4,] ##       Coef. Estimate   SE  t-stat d.f. (Satt) p-val (Satt) Sig. ##       legal   -9.180 7.62 -1.2042       24.94       0.2398      ##    beertaxa    3.395 9.40  0.3613        6.44       0.7295      ##  legal_cent   16.768 8.53  1.9665       25.44       0.0602    . ##   beer_cent    0.424 9.25  0.0458        6.42       0.9648 Wald_test(plm_Hausman,            constraints = constrain_zero(c(\"legal_cent\",\"beer_cent\")),            vcov = \"CR1\", test = \"chi-sq\") ##    test Fstat df_num df_denom  p_val sig ##  chi-sq  2.93      2      Inf 0.0534   . Wald_test(plm_Hausman,            constraints = constrain_zero(c(\"legal_cent\",\"beer_cent\")),            vcov = \"CR2\") ##  test Fstat df_num df_denom p_val sig ##   HTZ  2.56      2     11.7  0.12"},{"path":"http://jepusto.github.io/clubSandwich/articles/panel-data-CRVE.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Cluster-robust standard errors and hypothesis tests in panel data models","text":"Angrist, J. D., & Pischke, J. (2009). Mostly harmless econometrics: empiricist’s companion. Princeton, NJ: Princeton University Press. Angrist, J. D., Pischke, J. S. (2014). Mastering’metrics: path cause effect. Princeton, NJ: Princeton University Press. Arellano, M. (1993). testing correlated effects panel data. Journal Econometrics, 59(1-2), 87-97. doi: 10.1016/0304-4076(93)90040-C Bell, R. M., & McCaffrey, D. F. (2002). Bias reduction standard errors linear regression multi-stage samples. Survey Methodology, 28(2), 169-181. Cameron, . C., & Miller, D. L. (2015). practitioner’s guide cluster-robust inference. URL: http://cameron.econ.ucdavis.edu/research/Cameron_Miller_JHR_2015_February.pdf Carpenter, C., & Dobkin, C. (2011). minimum legal drinking age public health. Journal Economic Perspectives, 25(2), 133-156. doi: 10.1257/jep.25.2.133 Imbens, G. W., & Kolesar, M. (2015). Robust standard errors small samples: practical advice. URL: https://doi.org/10.1162/REST_a_00552 Pustejovsky, J. E. & Tipton, E. (2016). Small sample methods cluster-robust variance estimation hypothesis testing fixed effects models. arXiv: 1601.01981 [stat.] Young, . (2016). Improved, nearly exact, statistical inference robust clustered covariance matrices using effective degrees freedom corrections.","code":""},{"path":"http://jepusto.github.io/clubSandwich/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Pustejovsky. Author, maintainer.","code":""},{"path":"http://jepusto.github.io/clubSandwich/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pustejovsky J (2022). clubSandwich: Cluster-Robust (Sandwich) Variance Estimators Small-Sample Corrections. R package version 0.5.8, http://jepusto.github.io/clubSandwich/.","code":"@Manual{,   title = {clubSandwich: Cluster-Robust (Sandwich) Variance Estimators with Small-Sample Corrections},   author = {James Pustejovsky},   year = {2022},   note = {R package version 0.5.8},   url = {http://jepusto.github.io/clubSandwich/}, }"},{"path":"http://jepusto.github.io/clubSandwich/index.html","id":"clubsandwich","dir":"","previous_headings":"","what":"Cluster-Robust (Sandwich) Variance Estimators with Small-Sample\n    Corrections","title":"Cluster-Robust (Sandwich) Variance Estimators with Small-Sample\n    Corrections","text":"clubSandwich provides several cluster-robust variance estimators (.e., sandwich estimators) ordinary weighted least squares linear regression models, two-stage least squares regression models, generalized linear models. Several adjustments incorporated improve small-sample performance. package includes functions estimating variance-covariance matrix testing single- multiple-contrast hypotheses based Wald test statistics. Tests single regression coefficients use Satterthwaite saddlepoint corrections. Tests multiple-contrast hypotheses use approximation Hotelling’s T-squared distribution. Methods provided variety fitted models, including: lm() mlm() glm() ivreg (package ivreg, estimated using method = \"OLS\") ivreg (package AER) plm (package plm), gls lme (nlme) lmer (lme4) robu (robumeta) rma.uni rma.mv (metafor)","code":""},{"path":"http://jepusto.github.io/clubSandwich/index.html","id":"installing-clubsandwich","dir":"","previous_headings":"","what":"Installing clubSandwich","title":"Cluster-Robust (Sandwich) Variance Estimators with Small-Sample\n    Corrections","text":"package available Comprehensive R Archive Network. install , type install latest development version directly Github, type: installed, look available vignettes typing:","code":"install.packages(\"clubSandwich\") install.packages(\"remotes\") remotes::install_github(\"jepusto/clubSandwich\") browseVignettes(package=\"clubSandwich\")"},{"path":"http://jepusto.github.io/clubSandwich/reference/AchievementAwardsRCT.html","id":null,"dir":"Reference","previous_headings":"","what":"Achievement Awards Demonstration program — AchievementAwardsRCT","title":"Achievement Awards Demonstration program — AchievementAwardsRCT","text":"Data randomized trial Achievement Awards Demonstration program, reported Angrist & Lavy (2009).","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/AchievementAwardsRCT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Achievement Awards Demonstration program — AchievementAwardsRCT","text":"","code":"AchievementAwardsRCT"},{"path":"http://jepusto.github.io/clubSandwich/reference/AchievementAwardsRCT.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Achievement Awards Demonstration program — AchievementAwardsRCT","text":"data frame 16526 rows 21 variables: school_id Fictitious school identification number school_type Factor identifying school type (Arab religious, Jewish religious, Jewish secular) pair Number treatment pair. Note 7 triple. treated Indicator whether school treatment group year Cohort year student_id Fictitious student identification number sex Factor identifying student sex siblings Number siblings immigrant Indicator immigrant status father_ed Father's level education mother_ed Mother's level education Bagrut_status Indicator Bagrut attainment attempted Number Bagrut units attempted awarded Number Bagrut units awarded achv_math Indicator satisfaction math requirement achv_english Indicator satisfaction English requirement achv_hebrew Indicator satisfaction Hebrew requirement lagscore Lagged Bagrut score qrtl Quartile within distribution lagscore, calculated cohort sex half Lower upper half within distribution lagscore, calculated cohort sex","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/AchievementAwardsRCT.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Achievement Awards Demonstration program — AchievementAwardsRCT","text":"Angrist Data Archive","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/AchievementAwardsRCT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Achievement Awards Demonstration program — AchievementAwardsRCT","text":"Angrist, J. D., & Lavy, V. (2009). effects high stakes    high school achievement awards : Evidence randomized trial.   American Economic Review, 99(4), 1384-1414.   doi:10.1257/aer.99.4.1384","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/MortalityRates.html","id":null,"dir":"Reference","previous_headings":"","what":"State-level annual mortality rates by cause among 18-20 year-olds — MortalityRates","title":"State-level annual mortality rates by cause among 18-20 year-olds — MortalityRates","text":"dataset containing state-level annual mortality rates select causes death, well data related minimum legal drinking age alcohol consumption.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/MortalityRates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"State-level annual mortality rates by cause among 18-20 year-olds — MortalityRates","text":"","code":"MortalityRates"},{"path":"http://jepusto.github.io/clubSandwich/reference/MortalityRates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"State-level annual mortality rates by cause among 18-20 year-olds — MortalityRates","text":"data frame 5508 rows 12 variables: year Year observation state identifier state count Number deaths pop Population size legal Proportion 18-20 year-old population legally allowed drink beertaxa Beer taxation rate beerpercap Beer consumption per capita winepercap Wine consumption per capita spiritpercap Spirits consumption per capita totpercap Total alcohol consumption per capita mrate Mortality rate per 10,000 cause Cause death","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/MortalityRates.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"State-level annual mortality rates by cause among 18-20 year-olds — MortalityRates","text":"Mastering   'Metrics data archive","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/MortalityRates.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"State-level annual mortality rates by cause among 18-20 year-olds — MortalityRates","text":"Angrist, J. D., Pischke, J. S. (2014). _Mastering'metrics: path cause effect_. Princeton University Press, 2014. Carpenter, C., & Dobkin, C. (2011). minimum legal drinking age public health. _Journal Economic Perspectives, 25_(2), 133-156. doi:10.1257/jep.25.2.133","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/SATcoaching.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomized experiments on SAT coaching — SATcoaching","title":"Randomized experiments on SAT coaching — SATcoaching","text":"Effect sizes studies effects SAT coaching, reported Kalaian Raudenbush (1996)","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/SATcoaching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomized experiments on SAT coaching — SATcoaching","text":"","code":"SATcoaching"},{"path":"http://jepusto.github.io/clubSandwich/reference/SATcoaching.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Randomized experiments on SAT coaching — SATcoaching","text":"data frame 67 rows 11 variables: study Study identifier year Year publication test Character string indicating whether effect size corresponds outcome verbal (SATV) math (SATM) test d Effect size estimate (Standardized mean difference) V Variance effect size estimate nT Sample size treatment condition nC Sample size control condition study_type Character string indicating whether study design used matched, non-equivalent, randomized control group hrs Hours coaching ETS Indicator variable Educational Testing Service homework Indicator variable homework","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/SATcoaching.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Randomized experiments on SAT coaching — SATcoaching","text":"Kalaian, H. . & Raudenbush, S. W. (1996). multivariate mixed    linear model meta-analysis. Psychological Methods, 1(3),   227-235.    doi:10.1037/1082-989X.1.3.227","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/Wald_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test parameter constraints in a fitted linear regression model — Wald_test","title":"Test parameter constraints in a fitted linear regression model — Wald_test","text":"Wald_test reports Wald-type tests linear contrasts fitted linear regression model, using sandwich estimator variance-covariance matrix small sample correction p-value. Several different small-sample corrections available.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/Wald_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test parameter constraints in a fitted linear regression model — Wald_test","text":"","code":"Wald_test(obj, constraints, vcov, test = \"HTZ\", tidy = FALSE, ...)"},{"path":"http://jepusto.github.io/clubSandwich/reference/Wald_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test parameter constraints in a fitted linear regression model — Wald_test","text":"obj Fitted model calculate Wald tests. constraints List one constraints test. See details examples. vcov Variance covariance matrix estimated using vcovCR character string specifying small-sample adjustment used calculate variance-covariance. test Character vector specifying small-sample correction(s) calculate. following corrections available: \"chi-sq\", \"Naive-F\", \"Naive-Fp\", \"HTA\", \"HTB\", \"HTZ\", \"EDF\", \"EDT\". Default \"HTZ\". tidy Logical value controlling whether tidy test results. constraints list multiple constraints, result coerced data frame tidy = TRUE. ... arguments passed vcovCR, needed vcov character string.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/Wald_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test parameter constraints in a fitted linear regression model — Wald_test","text":"list test results.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/Wald_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test parameter constraints in a fitted linear regression model — Wald_test","text":"Constraints can specified directly q X p matrices   indirectly constrain_equal,   constrain_zero, constrain_pairwise","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/Wald_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test parameter constraints in a fitted linear regression model — Wald_test","text":"","code":"if (requireNamespace(\"carData\", quietly = TRUE)) withAutoprint({  data(Duncan, package = \"carData\") Duncan$cluster <- sample(LETTERS[1:8], size = nrow(Duncan), replace = TRUE)  Duncan_fit <- lm(prestige ~ 0 + type + income + type:income + type:education, data=Duncan) # Note that type:income terms are interactions because main effect of income is included # but type:education terms are separate slopes for each unique level of type  # Test equality of intercepts Wald_test(Duncan_fit,           constraints = constrain_equal(1:3),           vcov = \"CR2\", cluster = Duncan$cluster)  # Test equality of type-by-education slopes Wald_test(Duncan_fit,           constraints = constrain_equal(\":education\", reg_ex = TRUE),           vcov = \"CR2\", cluster = Duncan$cluster)  # Pairwise comparisons of type-by-education slopes Wald_test(Duncan_fit,           constraints = constrain_pairwise(\":education\", reg_ex = TRUE),           vcov = \"CR2\", cluster = Duncan$cluster)  # Test type-by-income interactions Wald_test(Duncan_fit,           constraints = constrain_zero(\":income\", reg_ex = TRUE),           vcov = \"CR2\", cluster = Duncan$cluster)  # Pairwise comparisons of type-by-income interactions Wald_test(Duncan_fit,           constraints = constrain_pairwise(\":income\", reg_ex = TRUE, with_zero = TRUE),           vcov = \"CR2\", cluster = Duncan$cluster)            }) #> > data(Duncan, package = \"carData\") #> > Duncan$cluster <- sample(LETTERS[1:8], size = nrow(Duncan), replace = TRUE) #> > Duncan_fit <- lm(prestige ~ 0 + type + income + type:income + type:education,  #> +     data = Duncan) #> > Wald_test(Duncan_fit, constraints = constrain_equal(1:3), vcov = \"CR2\",  #> +     cluster = Duncan$cluster) #>  test Fstat df_num df_denom p_val sig #>   HTZ  1.49      2     2.23 0.388     #> > Wald_test(Duncan_fit, constraints = constrain_equal(\":education\", reg_ex = TRUE),  #> +     vcov = \"CR2\", cluster = Duncan$cluster) #>  test Fstat df_num df_denom p_val sig #>   HTZ 0.385      2     2.81 0.711     #> > Wald_test(Duncan_fit, constraints = constrain_pairwise(\":education\", reg_ex = TRUE),  #> +     vcov = \"CR2\", cluster = Duncan$cluster) #> $`typeprof:education - typebc:education` #>  test   Fstat df_num df_denom p_val sig #>   HTZ 0.00191      1     3.28 0.968     #>  #> $`typewc:education - typebc:education` #>  test Fstat df_num df_denom p_val sig #>   HTZ 0.147      1     4.19  0.72     #>  #> $`typewc:education - typeprof:education` #>  test Fstat df_num df_denom p_val sig #>   HTZ 0.219      1     3.26 0.669     #>  #> > Wald_test(Duncan_fit, constraints = constrain_zero(\":income\", reg_ex = TRUE),  #> +     vcov = \"CR2\", cluster = Duncan$cluster) #>  test Fstat df_num df_denom p_val sig #>   HTZ  1.08      2     2.12 0.474     #> > Wald_test(Duncan_fit, constraints = constrain_pairwise(\":income\", reg_ex = TRUE,  #> +     with_zero = TRUE), vcov = \"CR2\", cluster = Duncan$cluster) #> $`typeprof:income` #>  test Fstat df_num df_denom p_val sig #>   HTZ  1.58      1     3.95 0.278     #>  #> $`typewc:income` #>  test Fstat df_num df_denom p_val sig #>   HTZ  2.21      1     1.95 0.278     #>  #> $`typewc:income - typeprof:income` #>  test    Fstat df_num df_denom p_val sig #>   HTZ 0.000668      1     2.71 0.981     #>"},{"path":"http://jepusto.github.io/clubSandwich/reference/coef_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test all or selected regression coefficients in a fitted model — coef_test","title":"Test all or selected regression coefficients in a fitted model — coef_test","text":"coef_test reports t-tests coefficient estimate fitted linear regression model, using sandwich estimator standard errors small sample correction p-value. small-sample correction based Satterthwaite approximation saddlepoint approximation.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/coef_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test all or selected regression coefficients in a fitted model — coef_test","text":"","code":"coef_test(   obj,   vcov,   test = \"Satterthwaite\",   coefs = \"All\",   p_values = TRUE,   ... )"},{"path":"http://jepusto.github.io/clubSandwich/reference/coef_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test all or selected regression coefficients in a fitted model — coef_test","text":"obj Fitted model calculate t-tests. vcov Variance covariance matrix estimated using vcovCR character string specifying small-sample adjustment used calculate variance-covariance. test Character vector specifying small-sample corrections calculate. \"z\" returns z test (.e., using standard normal reference distribution). \"naive-t\" returns t test m - 1 degrees freedom, m number unique clusters. \"naive-tp\" returns t test m - p degrees freedom, p number regression coefficients obj. \"Satterthwaite\" returns Satterthwaite correction. \"saddlepoint\" returns saddlepoint correction. Default \"Satterthwaite\". coefs Character, integer, logical vector specifying coefficients tested. default value \"\" test estimated coefficients. p_values Logical indicating whether report p-values. default value TRUE. ... arguments passed vcovCR, needed vcov character string.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/coef_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test all or selected regression coefficients in a fitted model — coef_test","text":"data frame containing estimated regression coefficients, standard   errors, test results. Satterthwaite approximation, degrees   freedom p-value reported. saddlepoint approximation,   saddlepoint p-value reported.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/coef_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test all or selected regression coefficients in a fitted model — coef_test","text":"","code":"data(\"ChickWeight\", package = \"datasets\") lm_fit <- lm(weight ~ Diet  * Time, data = ChickWeight) diet_index <- grepl(\"Diet.:Time\", names(coef(lm_fit))) coef_test(lm_fit, vcov = \"CR2\", cluster = ChickWeight$Chick, coefs = diet_index) #>       Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig. #>  Diet2:Time     1.77 1.49   1.19        18.8       0.2497      #>  Diet3:Time     4.58 1.35   3.39        18.8       0.0031   ** #>  Diet4:Time     2.87 1.01   2.85        18.3       0.0105    *  V_CR2 <- vcovCR(lm_fit, cluster = ChickWeight$Chick, type = \"CR2\") coef_test(lm_fit, vcov = V_CR2, coefs = diet_index) #>       Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig. #>  Diet2:Time     1.77 1.49   1.19        18.8       0.2497      #>  Diet3:Time     4.58 1.35   3.39        18.8       0.0031   ** #>  Diet4:Time     2.87 1.01   2.85        18.3       0.0105    *"},{"path":"http://jepusto.github.io/clubSandwich/reference/conf_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence intervals for all or selected regression coefficients in\na fitted model — conf_int","title":"Calculate confidence intervals for all or selected regression coefficients in\na fitted model — conf_int","text":"conf_int reports confidence intervals coefficient estimate fitted linear regression model, using sandwich estimator standard errors small sample correction critical values. small-sample correction based Satterthwaite approximation.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/conf_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence intervals for all or selected regression coefficients in\na fitted model — conf_int","text":"","code":"conf_int(   obj,   vcov,   level = 0.95,   test = \"Satterthwaite\",   coefs = \"All\",   ...,   p_values = FALSE )"},{"path":"http://jepusto.github.io/clubSandwich/reference/conf_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence intervals for all or selected regression coefficients in\na fitted model — conf_int","text":"obj Fitted model calculate confidence intervals. vcov Variance covariance matrix estimated using vcovCR character string specifying small-sample adjustment used calculate variance-covariance. level Desired coverage level confidence intervals. test Character vector specifying small-sample corrections calculate. \"z\" returns z test (.e., using standard normal reference distribution). \"naive-t\" returns t test m - 1 degrees freedom, m number unique clusters. \"naive-tp\" returns t test m - p degrees freedom, p number regression coefficients obj. \"Satterthwaite\" returns Satterthwaite correction. Unlike coef_test(), \"saddlepoint\" currently supported conf_int() saddlepoint confidence intervals closed-form solution. coefs Character, integer, logical vector specifying coefficients tested. default value \"\" test estimated coefficients. ... arguments passed vcovCR, needed vcov character string. p_values Logical indicating whether report p-values. default value FALSE.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/conf_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence intervals for all or selected regression coefficients in\na fitted model — conf_int","text":"data frame containing estimated regression coefficients, standard   errors, confidence intervals, (optionally) p-values.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/conf_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence intervals for all or selected regression coefficients in\na fitted model — conf_int","text":"","code":"data(\"ChickWeight\", package = \"datasets\") lm_fit <- lm(weight ~ Diet  * Time, data = ChickWeight) diet_index <- grepl(\"Diet.:Time\", names(coef(lm_fit))) conf_int(lm_fit, vcov = \"CR2\", cluster = ChickWeight$Chick, coefs = diet_index) #>       Coef. Estimate   SE d.f. Lower 95% CI Upper 95% CI #>  Diet2:Time     1.77 1.49 18.8       -1.349         4.88 #>  Diet3:Time     4.58 1.35 18.8        1.751         7.41 #>  Diet4:Time     2.87 1.01 18.3        0.757         4.99  V_CR2 <- vcovCR(lm_fit, cluster = ChickWeight$Chick, type = \"CR2\") conf_int(lm_fit, vcov = V_CR2, level = .99, coefs = diet_index) #>       Coef. Estimate   SE d.f. Lower 99% CI Upper 99% CI #>  Diet2:Time     1.77 1.49 18.8      -2.4946         6.03 #>  Diet3:Time     4.58 1.35 18.8       0.7115         8.45 #>  Diet4:Time     2.87 1.01 18.3      -0.0237         5.77"},{"path":"http://jepusto.github.io/clubSandwich/reference/constraint_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Create constraint matrices — constraint_matrices","title":"Create constraint matrices — constraint_matrices","text":"Helper functions create common types constraint matrices,   use Wald_test conduct Wald-type tests linear   contrasts fitted regression model.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/constraint_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create constraint matrices — constraint_matrices","text":"","code":"constrain_zero(constraints, coefs, reg_ex = FALSE)  constrain_equal(constraints, coefs, reg_ex = FALSE)  constrain_pairwise(constraints, coefs, reg_ex = FALSE, with_zero = FALSE)"},{"path":"http://jepusto.github.io/clubSandwich/reference/constraint_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create constraint matrices — constraint_matrices","text":"constraints Set constraints test. Can logical (using TRUE specify coefficients constrain), integer (specify index coefficients constrain), character (specify names coefficients constrain), regular expression. coefs Vector coefficient estimates, used determine column dimension constraint matrix. Can omitted function called inside Wald_test(). reg_ex Logical indicating whether constraints interpreted regular expression. Defaults FALSE. with_zero Logical indicating whether coefficients also compared zero. Defaults FALSE.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/constraint_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create constraint matrices — constraint_matrices","text":"matrix list matrices encoding specified set   constraints.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/constraint_matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create constraint matrices — constraint_matrices","text":"Constraints can specified character vectors, regular   expressions (reg_ex = TRUE), integer vectors, logical   vectors. constrain_zero() Creates matrix constrains specified set   coefficients equal zero. constrain_equal() Creates matrix constrains specified set   coefficients equal. constrain_pairwise() Creates list constraint matrices   consisting pairwise comparisons specified set   coefficients. with_zero = TRUE, list also include   set constraint matrices comparing coefficient zero.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/constraint_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create constraint matrices — constraint_matrices","text":"","code":"if (requireNamespace(\"carData\", quietly = TRUE)) withAutoprint({  data(Duncan, package = \"carData\") Duncan$cluster <- sample(LETTERS[1:8], size = nrow(Duncan), replace = TRUE)  Duncan_fit <- lm(prestige ~ 0 + type + income + type:income + type:education, data=Duncan) # Note that type:income terms are interactions because main effect of income is included # but type:education terms are separate slopes for each unique level of type  Duncan_coefs <- coef(Duncan_fit)  # The following are all equivalent constrain_zero(constraints = c(\"typeprof:income\",\"typewc:income\"),                 coefs = Duncan_coefs) constrain_zero(constraints = \":income\", coefs = Duncan_coefs,                 reg_ex = TRUE) constrain_zero(constraints = 5:6, coefs = Duncan_coefs) constrain_zero(constraints = c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE),                 coefs = Duncan_coefs)  # The following are all equivalent constrain_equal(c(\"typebc:education\",\"typeprof:education\",\"typewc:education\"),                  Duncan_coefs) constrain_equal(\":education\", Duncan_coefs, reg_ex = TRUE) constrain_equal(7:9, Duncan_coefs) constrain_equal(c(FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE),                  Duncan_coefs)  # Test pairwise equality of the education slopes constrain_pairwise(\":education\", Duncan_coefs,                    reg_ex = TRUE)  # Test pairwise equality of the income slopes, plus compare against zero constrain_pairwise(\":income\", Duncan_coefs,                     reg_ex = TRUE, with_zero = TRUE)                     }) #> > data(Duncan, package = \"carData\") #> > Duncan$cluster <- sample(LETTERS[1:8], size = nrow(Duncan), replace = TRUE) #> > Duncan_fit <- lm(prestige ~ 0 + type + income + type:income + type:education,  #> +     data = Duncan) #> > Duncan_coefs <- coef(Duncan_fit) #> > constrain_zero(constraints = c(\"typeprof:income\", \"typewc:income\"), coefs = Duncan_coefs) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    1    0    0    0    0 #> [2,]    0    0    0    0    0    1    0    0    0 #> > constrain_zero(constraints = \":income\", coefs = Duncan_coefs, reg_ex = TRUE) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    1    0    0    0    0 #> [2,]    0    0    0    0    0    1    0    0    0 #> > constrain_zero(constraints = 5:6, coefs = Duncan_coefs) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    1    0    0    0    0 #> [2,]    0    0    0    0    0    1    0    0    0 #> > constrain_zero(constraints = c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE,  #> +     FALSE, FALSE, FALSE), coefs = Duncan_coefs) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    1    0    0    0    0 #> [2,]    0    0    0    0    0    1    0    0    0 #> > constrain_equal(c(\"typebc:education\", \"typeprof:education\", \"typewc:education\"),  #> +     Duncan_coefs) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    0    0   -1    1    0 #> [2,]    0    0    0    0    0    0   -1    0    1 #> > constrain_equal(\":education\", Duncan_coefs, reg_ex = TRUE) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    0    0   -1    1    0 #> [2,]    0    0    0    0    0    0   -1    0    1 #> > constrain_equal(7:9, Duncan_coefs) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    0    0   -1    1    0 #> [2,]    0    0    0    0    0    0   -1    0    1 #> > constrain_equal(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE,  #> +     TRUE), Duncan_coefs) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    0    0   -1    1    0 #> [2,]    0    0    0    0    0    0   -1    0    1 #> > constrain_pairwise(\":education\", Duncan_coefs, reg_ex = TRUE) #> $`typeprof:education - typebc:education` #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    0    0   -1    1    0 #>  #> $`typewc:education - typebc:education` #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    0    0   -1    0    1 #>  #> $`typewc:education - typeprof:education` #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    0    0    0   -1    1 #>  #> > constrain_pairwise(\":income\", Duncan_coefs, reg_ex = TRUE, with_zero = TRUE) #> $`typeprof:income` #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    1    0    0    0    0 #>  #> $`typewc:income` #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0    0    1    0    0    0 #>  #> $`typewc:income - typeprof:income` #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    0    0    0    0   -1    1    0    0    0 #>"},{"path":"http://jepusto.github.io/clubSandwich/reference/dropoutPrevention.html","id":null,"dir":"Reference","previous_headings":"","what":"Dropout prevention/intervention program effects — dropoutPrevention","title":"Dropout prevention/intervention program effects — dropoutPrevention","text":"dataset containing estimated effect sizes, variances, covariates meta-analysis dropout prevention/intervention program effects, conducted Wilson et al. (2011). Missing observations imputed.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/dropoutPrevention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dropout prevention/intervention program effects — dropoutPrevention","text":"","code":"dropoutPrevention"},{"path":"http://jepusto.github.io/clubSandwich/reference/dropoutPrevention.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dropout prevention/intervention program effects — dropoutPrevention","text":"data frame 385 rows 18 variables: LOR1 log-odds ratio measuring intervention effect varLOR estimated sampling variance log-odds ratio studyID unique identifier study studySample unique   identifier sample within study study_design study design   (randomized, matched, non-randomized unmatched) outcome outcome measure intervention effect estimated   (school dropout, school enrollment, graduation, graduation GED receipt) evaluator_independence degree evaluator independence   (independent, indirect influential, involved planning   delivery, involved delivery) implementation_quality level   implementation quality (clear problems, possible problems, apparent   problems) program_site Program delivery site (community, mixed,   school classroom, school outside classroom) attrition Overall attrition (proportion) group_equivalence pretest group-equivalence log-odds ratio adjusted adjusted unadjusted data used calculate intervention   effect male_pct proportion sample male white_pct proportion sample white average_age average age sample duration program   duration (weeks) service_hrs program contact hours per week big_study indicator 32 studies 3 effect sizes","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/dropoutPrevention.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dropout prevention/intervention program effects — dropoutPrevention","text":"Wilson, S. J., Lipsey, M. W., Tanner-Smith, E., Huang, C. H., &   Steinka-Fry, K. T. (2011). Dropout prevention intervention programs:   Effects school completion dropout Among school-aged children   youth: systematic review. _Campbell Systematic Reviews, 7_(1), 1-61.   doi:10.4073/csr.2011.8","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/dropoutPrevention.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dropout prevention/intervention program effects — dropoutPrevention","text":"Wilson, S. J., Lipsey, M. W., Tanner-Smith, E., Huang, C. H., &   Steinka-Fry, K. T. (2011). Dropout prevention intervention programs:   Effects school completion dropout Among school-aged children   youth: systematic review. _Campbell Systematic Reviews, 7_(1), 1-61.   doi:10.4073/csr.2011.8 Tipton, E., & Pustejovsky, J. E. (2015). Small-sample adjustments tests   moderators model fit using robust variance estimation   meta-regression. _Journal Educational Behavioral Statistics, 40_(6), 604-634.   doi:10.3102/1076998615606099","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/findCluster.rma.mv.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect cluster structure of an rma.mv object — findCluster.rma.mv","title":"Detect cluster structure of an rma.mv object — findCluster.rma.mv","text":"findCluster.rma.mv returns vector ID variables highest level clustering fitted rma.mv model.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/findCluster.rma.mv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect cluster structure of an rma.mv object — findCluster.rma.mv","text":"","code":"findCluster.rma.mv(obj)"},{"path":"http://jepusto.github.io/clubSandwich/reference/findCluster.rma.mv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect cluster structure of an rma.mv object — findCluster.rma.mv","text":"obj fitted rma.mv object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/findCluster.rma.mv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect cluster structure of an rma.mv object — findCluster.rma.mv","text":"vector ID variables highest level clustering obj.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/findCluster.rma.mv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect cluster structure of an rma.mv object — findCluster.rma.mv","text":"","code":"if (requireNamespace(\"metafor\", quietly = TRUE)) {  library(metafor) data(dat.assink2016, package = \"metadat\")  mfor_fit <- rma.mv(yi ~ year + deltype,                   V = vi, random = ~ 1 | study / esid,                  data = dat.assink2016)                   findCluster.rma.mv(mfor_fit)  } #> Loading required package: Matrix #> Loading required package: metadat #>  #> Loading the 'metafor' package (version 3.4-0). For an #> introduction to the package please type: help(metafor) #>   [1] 1  1  1  1  1  1  2  2  2  3  3  3  3  3  3  3  3  3  3  4  5  6  6  6  6  #>  [26] 6  7  7  7  7  7  7  8  9  9  10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 #>  [51] 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 13 13 14 14 14 14 14 14 #>  [76] 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 #> Levels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17"},{"path":"http://jepusto.github.io/clubSandwich/reference/impute_covariance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute a block-diagonal covariance matrix — impute_covariance_matrix","title":"Impute a block-diagonal covariance matrix — impute_covariance_matrix","text":"impute_covariance_matrix calculates   block-diagonal covariance matrix, given marginal variances, block   structure, assumed correlation structure. Can used create   compound-symmetric structures, AR(1) auto-correlated structures,   combinations thereof.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/impute_covariance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute a block-diagonal covariance matrix — impute_covariance_matrix","text":"","code":"impute_covariance_matrix(   vi,   cluster,   r,   ti,   ar1,   smooth_vi = FALSE,   subgroup = NULL,   return_list = identical(as.factor(cluster), sort(as.factor(cluster))),   check_PD = TRUE )"},{"path":"http://jepusto.github.io/clubSandwich/reference/impute_covariance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute a block-diagonal covariance matrix — impute_covariance_matrix","text":"vi Vector variances cluster Vector indicating effects belong cluster. Effects value `cluster` treated correlated. r Vector numeric value assumed constant correlation(s) effect size estimates study. ti Vector time-points describing temporal spacing effects, use auto-regressive correlation structures. ar1 Vector numeric value assumed AR(1) auto-correlation(s) effect size estimates study. specified, ti argument must specified. smooth_vi Logical indicating whether smooth marginal variances taking average vi within cluster. Defaults FALSE. subgroup Vector category labels describing sub-groups effects. non-null, effects share category label cluster treated correlated, effects different category labels treated uncorrelated, even come cluster. return_list Optional logical indicating whether return list matrices (one entry per block) full variance-covariance matrix. check_PD Optional logical indicating whether check whether covariance matrix positive definite. TRUE (default), function display warning covariance matrix positive definite.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/impute_covariance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute a block-diagonal covariance matrix — impute_covariance_matrix","text":"cluster appropriately sorted, list matrices,   one entry per cluster, returned default. cluster order, full variance-covariance matrix returned   default. output structure can controlled optional  return_list argument.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/impute_covariance_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute a block-diagonal covariance matrix — impute_covariance_matrix","text":"block-diagonal variance-covariance matrix (possibly represented   list matrices) specified structure. structure depends   whether r argument, ar1 argument, arguments   specified. Let \\(v_{ij}\\) denote specified variance   effect \\(\\) cluster \\(j\\) \\(C_{hij}\\)   covariance effects \\(h\\) \\(\\) cluster   \\(j\\). r specified, block   variance-covariance matrix constant (compound symmetric)   correlation, $$C_{hij} = r_j \\sqrt{v_{hj} v_{ij},}$$ \\(r_j\\) specified correlation   cluster \\(j\\). single value given r,   used every cluster. ar1   specified, block variance-covariance matrix   AR(1) auto-correlation structure, $$C_{hij} = \\phi_j^{|t_{hj}   - t_{ij}|} \\sqrt{v_{hj} v_{ij},}$$ \\(\\phi_j\\) specified auto-correlation   cluster \\(j\\) \\(t_{hj}\\) \\(t_{ij}\\)   specified time-points corresponding effects \\(h\\)   \\(\\) cluster \\(j\\). single value given   ar1, used every cluster. r   ar1 specified, block variance-covariance   matrix combination compound symmetric AR(1)   auto-correlation structures, $$C_{hij} = \\left[r_j + (1 -   r_j)\\phi_j^{|t_{hj} - t_{ij}|}\\right] \\sqrt{v_{hj} v_{ij},}$$   \\(r_j\\) specified constant correlation cluster   \\(j\\), \\(\\phi_j\\) specified auto-correlation   cluster \\(j\\) \\(t_{hj}\\) \\(t_{ij}\\)   specified time-points corresponding effects \\(h\\)   \\(\\) cluster \\(j\\). single values given   r ar1, used every cluster.   smooth_vi = TRUE, variances within cluster   \\(j\\) set equal average variance cluster   \\(j\\), .e., $$v'_{ij} = \\frac{1}{n_j} \\sum_{=1}^{n_j}   v_{ij}$$   \\(=1,...,n_j\\) \\(j=1,...,k\\).","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/impute_covariance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute a block-diagonal covariance matrix — impute_covariance_matrix","text":"","code":"if (requireNamespace(\"metafor\", quietly = TRUE)) {  library(metafor)  # Constant correlation data(SATcoaching) V_list <- impute_covariance_matrix(vi = SATcoaching$V, cluster = SATcoaching$study, r = 0.66) MVFE <- rma.mv(d ~ 0 + test, V = V_list, data = SATcoaching) conf_int(MVFE, vcov = \"CR2\", cluster = SATcoaching$study)  } #>       Coef. Estimate     SE d.f. Lower 95% CI Upper 95% CI #>    testMath    0.132 0.0376 13.2       0.0506        0.213 #>  testVerbal    0.122 0.0250 16.9       0.0686        0.174"},{"path":"http://jepusto.github.io/clubSandwich/reference/linear_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence intervals and p-values for linear contrasts of\nregression coefficients in a fitted model — linear_contrast","title":"Calculate confidence intervals and p-values for linear contrasts of\nregression coefficients in a fitted model — linear_contrast","text":"linear_contrast reports confidence intervals (optionally) p-values linear contrasts regression coefficients fitted model, using sandwich estimator standard errors (optionally) small sample correction critical values. default small-sample correction based Satterthwaite approximation.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/linear_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence intervals and p-values for linear contrasts of\nregression coefficients in a fitted model — linear_contrast","text":"","code":"linear_contrast(   obj,   vcov,   contrasts,   level = 0.95,   test = \"Satterthwaite\",   ...,   p_values = FALSE )"},{"path":"http://jepusto.github.io/clubSandwich/reference/linear_contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence intervals and p-values for linear contrasts of\nregression coefficients in a fitted model — linear_contrast","text":"obj Fitted model calculate confidence intervals. vcov Variance covariance matrix estimated using vcovCR character string specifying small-sample adjustment used calculate variance-covariance. contrasts contrast matrix, list multiple contrast matrices test. See details examples. level Desired coverage level confidence intervals. test Character vector specifying small-sample corrections calculate. \"z\" returns z test (.e., using standard normal reference distribution). \"naive-t\" returns t test m - 1 degrees freedom, m number unique clusters. \"naive-tp\" returns t test m - p degrees freedom, p number regression coefficients obj. \"Satterthwaite\" returns Satterthwaite correction. Unlike coef_test(), \"saddlepoint\" currently supported conf_int() saddlepoint confidence intervals closed-form solution. ... arguments passed vcovCR, needed vcov character string. p_values Logical indicating whether report p-values. default value FALSE.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/linear_contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence intervals and p-values for linear contrasts of\nregression coefficients in a fitted model — linear_contrast","text":"data frame containing estimated contrasts, standard   errors, confidence intervals, (optionally) p-values.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/linear_contrast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate confidence intervals and p-values for linear contrasts of\nregression coefficients in a fitted model — linear_contrast","text":"Constraints can specified directly q X p matrices   indirectly constrain_pairwise,   constrain_equal, constrain_zero.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/linear_contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence intervals and p-values for linear contrasts of\nregression coefficients in a fitted model — linear_contrast","text":"","code":"data(\"ChickWeight\", package = \"datasets\") lm_fit <- lm(weight ~ 0 + Diet + Time:Diet, data = ChickWeight)  # Pairwise comparisons of diet-by-time slopes linear_contrast(lm_fit, vcov = \"CR2\", cluster = ChickWeight$Chick,                  contrasts = constrain_pairwise(\"Diet.:Time\", reg_ex = TRUE)) #>                    Coef. Estimate   SE d.f. Lower 95% CI Upper 95% CI #>  Diet2:Time - Diet1:Time     1.77 1.49 18.8       -1.349         4.88 #>  Diet3:Time - Diet1:Time     4.58 1.35 18.8        1.751         7.41 #>  Diet4:Time - Diet1:Time     2.87 1.01 18.3        0.757         4.99 #>  Diet3:Time - Diet2:Time     2.81 1.70 18.0       -0.756         6.38 #>  Diet4:Time - Diet2:Time     1.11 1.44 17.9       -1.925         4.14 #>  Diet4:Time - Diet3:Time    -1.71 1.30 17.9       -4.441         1.02   if (requireNamespace(\"carData\", quietly = TRUE)) withAutoprint({    data(Duncan, package = \"carData\")   Duncan$cluster <- sample(LETTERS[1:8], size = nrow(Duncan), replace = TRUE)    Duncan_fit <- lm(prestige ~ 0 + type + income + type:income + type:education, data=Duncan)   # Note that type:income terms are interactions because main effect of income is included   # but type:education terms are separate slopes for each unique level of type    # Pairwise comparisons of type-by-education slopes   linear_contrast(Duncan_fit, vcov = \"CR2\", cluster = Duncan$cluster,                   contrasts = constrain_pairwise(\":education\", reg_ex = TRUE),                   test = \"Satterthwaite\")     # Pairwise comparisons of type-by-income interactions   linear_contrast(Duncan_fit, vcov = \"CR2\", cluster = Duncan$cluster,                   contrasts = constrain_pairwise(\":income\", reg_ex = TRUE, with_zero = TRUE),                   test = \"Satterthwaite\")                    }) #> > data(Duncan, package = \"carData\") #> > Duncan$cluster <- sample(LETTERS[1:8], size = nrow(Duncan), replace = TRUE) #> > Duncan_fit <- lm(prestige ~ 0 + type + income + type:income + type:education,  #> +     data = Duncan) #> > linear_contrast(Duncan_fit, vcov = \"CR2\", cluster = Duncan$cluster, contrasts = constrain_pairwise(\":education\",  #> +     reg_ex = TRUE), test = \"Satterthwaite\") #>                                  Coef. Estimate    SE d.f. Lower 95% CI #>  typeprof:education - typebc:education   0.0186 0.377 4.60       -0.977 #>    typewc:education - typebc:education   0.1068 0.261 3.17       -0.699 #>  typewc:education - typeprof:education   0.0882 0.271 3.62       -0.698 #>  Upper 95% CI #>         1.015 #>         0.913 #>         0.874 #> > linear_contrast(Duncan_fit, vcov = \"CR2\", cluster = Duncan$cluster, contrasts = constrain_pairwise(\":income\",  #> +     reg_ex = TRUE, with_zero = TRUE), test = \"Satterthwaite\") #>                            Coef. Estimate    SE d.f. Lower 95% CI Upper 95% CI #>                  typeprof:income -0.36914 0.349 4.20        -1.32        0.583 #>                    typewc:income -0.36031 0.262 2.52        -1.29        0.571 #>  typewc:income - typeprof:income  0.00883 0.392 3.34        -1.17        1.188"},{"path":"http://jepusto.github.io/clubSandwich/reference/pattern_covariance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute a patterned block-diagonal covariance matrix — pattern_covariance_matrix","title":"Impute a patterned block-diagonal covariance matrix — pattern_covariance_matrix","text":"pattern_covariance_matrix calculates   block-diagonal covariance matrix, given marginal variances, block   structure, assumed correlation structure defined patterned   correlation matrix.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/pattern_covariance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute a patterned block-diagonal covariance matrix — pattern_covariance_matrix","text":"","code":"pattern_covariance_matrix(   vi,   cluster,   pattern_level,   r_pattern,   r,   smooth_vi = FALSE,   subgroup = NULL,   return_list = identical(as.factor(cluster), sort(as.factor(cluster))),   check_PD = TRUE )"},{"path":"http://jepusto.github.io/clubSandwich/reference/pattern_covariance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute a patterned block-diagonal covariance matrix — pattern_covariance_matrix","text":"vi Vector variances cluster Vector indicating effects belong cluster. Effects value `cluster` treated correlated. pattern_level Vector categories effect size, used determine entry pattern matrix used impute correlation. r_pattern Patterned correlation matrix row column names corresponding levels pattern. r Vector numeric value assumed constant correlation(s) effect size estimates study. smooth_vi Logical indicating whether smooth marginal variances taking average vi within cluster. Defaults FALSE. subgroup Vector category labels describing sub-groups effects. non-null, effects share category label cluster treated correlated, effects different category labels treated uncorrelated, even come cluster. return_list Optional logical indicating whether return list matrices (one entry per block) full variance-covariance matrix. check_PD Optional logical indicating whether check whether covariance matrix positive definite. TRUE (default), function display warning covariance matrix positive definite.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/pattern_covariance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute a patterned block-diagonal covariance matrix — pattern_covariance_matrix","text":"cluster appropriately sorted, list matrices,   one entry per cluster, returned default. cluster order, full variance-covariance matrix returned   default. output structure can controlled optional  return_list argument.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/pattern_covariance_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute a patterned block-diagonal covariance matrix — pattern_covariance_matrix","text":"block-diagonal variance-covariance matrix (possibly represented   list matrices) specified correlation structure, defined   patterned correlation matrix. Let \\(v_{ij}\\) denote specified   variance effect \\(\\) cluster \\(j\\)   \\(C_{hij}\\) covariance effects \\(h\\)   \\(\\) cluster \\(j\\). Let \\(p_{ij}\\) level   pattern variable effect \\(\\) cluster \\(j\\),   taking value \\(1,...,C\\). patterned correlation matrix   defined set correlations pairs effects taking   possible combination patterns. Formally, let \\(r_{cd}\\)   correlation effects categories \\(c\\) \\(d\\),   respectively, \\(r_{cd} = r_{dc}\\).   covariance effects \\(h\\) \\(\\) cluster   \\(j\\) taken $$C_{hij} = \\sqrt{v_{hj} v_{ij}} \\times   r_{p_{hj} p_{ij}}.$$ Correlations effect sizes within category defined diagonal   values pattern matrix, may take values less one. Combinations pattern levels occur patterned correlation matrix set equal r. smooth_vi = TRUE, variances within cluster   \\(j\\) set equal average variance cluster   \\(j\\), .e., $$v'_{ij} = \\frac{1}{n_j} \\sum_{=1}^{n_j}   v_{ij}$$   \\(=1,...,n_j\\) \\(j=1,...,k\\).","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/pattern_covariance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute a patterned block-diagonal covariance matrix — pattern_covariance_matrix","text":"","code":"pkgs_available <-    requireNamespace(\"metafor\", quietly = TRUE) &    requireNamespace(\"robumeta\", quietly = TRUE)    if (pkgs_available) { library(metafor)  data(oswald2013, package = \"robumeta\") dat <- escalc(data = oswald2013, measure = \"ZCOR\", ri = R, ni = N) subset_ids <- unique(dat$Study)[1:20] dat <- subset(dat, Study %in% subset_ids)  # make a patterned correlation matrix   p_levels <- levels(dat$Crit.Cat) r_pattern <- 0.7^as.matrix(dist(1:length(p_levels))) diag(r_pattern) <- seq(0.75, 0.95, length.out = 6) rownames(r_pattern) <- colnames(r_pattern) <- p_levels  # impute the covariance matrix using patterned correlations V_list <- pattern_covariance_matrix(vi = dat$vi,                                      cluster = dat$Study,                                      pattern_level = dat$Crit.Cat,                                     r_pattern = r_pattern,                                     smooth_vi = TRUE)                                      # fit a model using imputed covariance matrix  MVFE <- rma.mv(yi ~ 0 + Crit.Cat, V = V_list,                 random = ~ Crit.Cat | Study,                data = dat)                 conf_int(MVFE, vcov = \"CR2\")  } #>                           Coef. Estimate       SE d.f. Lower 95% CI #>          Crit.CatBrain Activity   0.1425 4.49e-01 2.84     -1.33431 #>  Crit.CatInterpersonal Behavior   0.0167 3.65e-03 1.63     -0.00307 #>           Crit.CatMicrobehavior   0.1308 3.43e-02 3.64      0.03178 #>       Crit.CatPerson Perception   0.1544 1.94e-02 8.08      0.10963 #>       Crit.CatPolicy Preference   0.0864 5.10e-02 1.98     -0.13561 #>           Crit.CatResponse Time   0.2988 4.25e-14 1.00      0.29882 #>  Upper 95% CI #>        1.6193 #>        0.0364 #>        0.2298 #>        0.1991 #>        0.3084 #>        0.2988"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for a glm object. — vcovCR.glm","title":"Cluster-robust variance-covariance matrix for a glm object. — vcovCR.glm","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates glm object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for a glm object. — vcovCR.glm","text":"","code":"# S3 method for glm vcovCR(   obj,   cluster,   type,   target = NULL,   inverse_var = NULL,   form = \"sandwich\",   ... )"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for a glm object. — vcovCR.glm","text":"obj Fitted model calculate variance-covariance matrix cluster Expression vector indicating observations belong cluster. Required glm objects. type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working variance-covariance model used calculate CR2 CR4 adjustment matrices. vector, target matrix assumed diagonal. specified, target taken estimated variance function. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for a glm object. — vcovCR.glm","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists   matrix estimated variance covariances   regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for a glm object. — vcovCR.glm","text":"","code":"if (requireNamespace(\"geepack\", quietly = TRUE)) {    data(dietox, package = \"geepack\")   dietox$Cu <- as.factor(dietox$Cu)   weight_fit <- glm(Weight ~ Cu * poly(Time, 3), data=dietox, family = \"quasipoisson\")   V_CR <- vcovCR(weight_fit, cluster = dietox$Pig, type = \"CR2\")   coef_test(weight_fit, vcov = V_CR, test = \"Satterthwaite\")    } #>                   Coef. Estimate     SE  t-stat d.f. (Satt) p-val (Satt) Sig. #>             (Intercept)   4.0124 0.0190 211.193        22.0       <0.001  *** #>                 CuCu035  -0.0134 0.0286  -0.469        45.7        0.641      #>                 CuCu175   0.0330 0.0333   0.993        44.8        0.326      #>          poly(Time, 3)1  12.7115 0.2414  52.655        22.0       <0.001  *** #>          poly(Time, 3)2  -1.6810 0.1456 -11.545        22.0       <0.001  *** #>          poly(Time, 3)3   0.0292 0.0566   0.517        21.9        0.611      #>  CuCu035:poly(Time, 3)1  -0.0823 0.3120  -0.264        45.6        0.793      #>  CuCu175:poly(Time, 3)1  -0.3242 0.3433  -0.944        44.8        0.350      #>  CuCu035:poly(Time, 3)2   0.0927 0.2113   0.439        45.6        0.663      #>  CuCu175:poly(Time, 3)2  -0.1777 0.1656  -1.073        44.8        0.289      #>  CuCu035:poly(Time, 3)3  -0.1010 0.1013  -0.997        45.5        0.324      #>  CuCu175:poly(Time, 3)3   0.1146 0.0998   1.149        44.7        0.257"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.gls.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for a gls object. — vcovCR.gls","title":"Cluster-robust variance-covariance matrix for a gls object. — vcovCR.gls","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates gls object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.gls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for a gls object. — vcovCR.gls","text":"","code":"# S3 method for gls vcovCR(obj, cluster, type, target, inverse_var, form = \"sandwich\", ...)"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.gls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for a gls object. — vcovCR.gls","text":"obj Fitted model calculate variance-covariance matrix cluster Optional expression vector indicating observations  belong cluster. specified, set  getGroups(obj). type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working  variance-covariance model used calculate CR2 CR4  adjustment matrices. specified, target taken estimated variance-covariance structure gls object. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.gls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for a gls object. — vcovCR.gls","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists    matrix estimated variance covariances    regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.gls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for a gls object. — vcovCR.gls","text":"","code":"if (requireNamespace(\"nlme\", quietly = TRUE)) {    library(nlme)   data(Ovary, package = \"nlme\")   Ovary$time_int <- 1:nrow(Ovary)   lm_AR1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), data = Ovary,                  correlation = corAR1(form = ~ time_int | Mare))   vcovCR(lm_AR1, type = \"CR2\")  } #>                    (Intercept) sin(2 * pi * Time) cos(2 * pi * Time) #> (Intercept)          1.0319747        -0.25050263        -0.28914347 #> sin(2 * pi * Time)  -0.2505026         0.31620081         0.02677139 #> cos(2 * pi * Time)  -0.2891435         0.02677139         0.16709681"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix — vcovCR","title":"Cluster-robust variance-covariance matrix — vcovCR","text":"generic function, specific methods defined    lm, plm, glm,    gls, lme,   robu, rma.uni,   rma.mv objects. vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix — vcovCR","text":"","code":"vcovCR(obj, cluster, type, target, inverse_var, form, ...)  # S3 method for default vcovCR(   obj,   cluster,   type,   target = NULL,   inverse_var = FALSE,   form = \"sandwich\",   ... )"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix — vcovCR","text":"obj Fitted model calculate variance-covariance matrix cluster Expression vector indicating observations belong  cluster. classes, cluster detected  automatically specified. type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working  variance-covariance model used calculate CR2 CR4  adjustment matrices. vector, target matrix assumed  diagonal. specified, vcovCR attempt infer value. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix — vcovCR","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists    matrix estimated variance covariances    regression coefficient estimates. matrix several attributes:  type indicates small-sample adjustment used cluster contains factor vector defines independent    clusters bread contains bread matrix v_scale constant    used scaling sandwich estimator est_mats contains list    estimating matrices used calculate sandwich estimator adjustments contains list adjustment matrices used calculate   sandwich estimator target contains working    variance-covariance model used calculate adjustment matrices.    needed calculating small-sample corrections Wald tests.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster-robust variance-covariance matrix — vcovCR","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates. Several different small sample corrections available, run    parallel \"HC\" corrections heteroskedasticity-consistent    variance estimators, implemented vcovHC.   \"CR2\" adjustment recommended (Pustejovsky & Tipton, 2017; Imbens &   Kolesar, 2016). See Pustejovsky Tipton (2017) Cameron Miller   (2015) technical details. Available options include: \"CR0\" original form sandwich estimator (Liang & Zeger,   1986), make small-sample correction. \"CR1\" multiplies CR0 m / (m - 1), m    number clusters. \"CR1p\" multiplies CR0 m / (m - p), m    number clusters p number covariates. \"CR1S\" multiplies CR0 (m (N-1)) / [(m -    1)(N - p)], m number clusters, N    total number observations, p number covariates.    Stata commands use correction default. \"CR2\"   \"bias-reduced linearization\" adjustment proposed Bell McCaffrey   (2002) developed Pustejovsky Tipton (2017).   adjustment chosen variance-covariance estimator exactly   unbiased user-specified working model. \"CR3\" approximates leave-one-cluster-jackknife variance estimator (Bell & McCaffrey,   2002).","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cluster-robust variance-covariance matrix — vcovCR","text":"Bell, R. M., & McCaffrey, D. F. (2002). Bias reduction standard errors linear regression multi-stage samples. Survey Methodology, 28(2), 169-181. Cameron, . C., & Miller, D. L. (2015). Practitioner's Guide Cluster-Robust Inference. Journal Human Resources, 50(2), 317-372. doi:10.3368/jhr.50.2.317 Imbens, G. W., & Kolesar, M. (2016). Robust standard errors small samples: practical advice. Review Economics Statistics, 98(4), 701-712. doi:10.1162/rest_a_00552 Liang, K.-Y., & Zeger, S. L. (1986). Longitudinal data analysis using generalized linear models. Biometrika, 73(1), 13-22. doi:10.1093/biomet/73.1.13 Pustejovsky, J. E. & Tipton, E. (2018). Small sample methods cluster-robust variance estimation hypothesis testing fixed effects models. Journal Business Economic Statistics, 36(4), 672-683. doi:10.1080/07350015.2016.1247004","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix — vcovCR","text":"","code":"# simulate design with cluster-dependence m <- 8 cluster <- factor(rep(LETTERS[1:m], 3 + rpois(m, 5))) n <- length(cluster) X <- matrix(rnorm(3 * n), n, 3) nu <- rnorm(m)[cluster] e <- rnorm(n) y <- X %*% c(.4, .3, -.3) + nu + e dat <- data.frame(y, X, cluster, row = 1:n)  # fit linear model lm_fit <- lm(y ~ X1 + X2 + X3, data = dat) vcov(lm_fit) #>               (Intercept)            X1            X2            X3 #> (Intercept)  0.0161608961  0.0007405011 -0.0020295990 -0.0028734927 #> X1           0.0007405011  0.0132030246  0.0004678429 -0.0013456696 #> X2          -0.0020295990  0.0004678429  0.0143907135  0.0003292705 #> X3          -0.0028734927 -0.0013456696  0.0003292705  0.0164667368  # cluster-robust variance estimator with CR2 small-sample correction vcovCR(lm_fit, cluster = dat$cluster, type = \"CR2\") #>               (Intercept)           X1           X2            X3 #> (Intercept)  0.0687885388 -0.011236885 -0.004712620 -0.0009310812 #> X1          -0.0112368848  0.019225669  0.008988851 -0.0070127944 #> X2          -0.0047126201  0.008988851  0.009055067 -0.0065932424 #> X3          -0.0009310812 -0.007012794 -0.006593242  0.0110608747  # compare small-sample adjustments CR_types <- paste0(\"CR\",c(\"0\",\"1\",\"1S\",\"2\",\"3\")) sapply(CR_types, function(type)         sqrt(diag(vcovCR(lm_fit, cluster = dat$cluster, type = type)))) #>                    CR0        CR1       CR1S        CR2       CR3 #> (Intercept) 0.23642249 0.25274627 0.25842667 0.26227569 0.2921743 #> X1          0.12164048 0.13003914 0.13296173 0.13865666 0.1590186 #> X2          0.08473149 0.09058177 0.09261757 0.09515811 0.1071577 #> X3          0.09230280 0.09867585 0.10089356 0.10517069 0.1225899"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.ivreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for an ivreg object. — vcovCR.ivreg","title":"Cluster-robust variance-covariance matrix for an ivreg object. — vcovCR.ivreg","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates ivreg object fitted AER package ivreg package.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.ivreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for an ivreg object. — vcovCR.ivreg","text":"","code":"# S3 method for ivreg vcovCR(   obj,   cluster,   type,   target = NULL,   inverse_var = FALSE,   form = \"sandwich\",   ... )"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.ivreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for an ivreg object. — vcovCR.ivreg","text":"obj Fitted model calculate variance-covariance matrix cluster Expression vector indicating observations belong cluster. Required ivreg objects. type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working variance-covariance model used calculate CR2 CR4 adjustment matrices. vector, target matrix assumed diagonal. specified, target taken identity matrix. inverse_var used ivreg objects. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.ivreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for an ivreg object. — vcovCR.ivreg","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists   matrix estimated variance covariances   regression coefficient estimates.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.ivreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster-robust variance-covariance matrix for an ivreg object. — vcovCR.ivreg","text":"\"ivreg\" objects fitted via ivreg    function ivreg package, traditional 2SLS    regression method (method = \"OLS\") supported.   clubSandwich currently support robust-regression methods   M-estimation (method = \"M\") MM-estimation (method = \"MM\").","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.ivreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for an ivreg object. — vcovCR.ivreg","text":"","code":"if (requireNamespace(\"AER\", quietly = TRUE)) withAutoprint({    library(AER)   data(\"CigarettesSW\")   Cigs <- within(CigarettesSW, {     rprice <- price/cpi     rincome <- income/population/cpi     tdiff <- (taxs - tax)/cpi   })    iv_fit_AER <- AER::ivreg(log(packs) ~ log(rprice) + log(rincome) |                    log(rincome) + tdiff + I(tax/cpi), data = Cigs)   vcovCR(iv_fit_AER, cluster = Cigs$state, type = \"CR2\")   coef_test(iv_fit_AER, vcov = \"CR2\", cluster = Cigs$state)  }) #> > library(AER) #> Loading required package: car #> Loading required package: carData #>  #> Attaching package: ‘car’ #> The following object is masked from ‘package:metafor’: #>  #>     vif #> Loading required package: lmtest #> Loading required package: zoo #>  #> Attaching package: ‘zoo’ #> The following objects are masked from ‘package:base’: #>  #>     as.Date, as.Date.numeric #> Loading required package: sandwich #> Loading required package: survival #> > data(\"CigarettesSW\") #> > Cigs <- within(CigarettesSW, { #> +     rprice <- price/cpi #> +     rincome <- income/population/cpi #> +     tdiff <- (taxs - tax)/cpi #> + }) #> > iv_fit_AER <- AER::ivreg(log(packs) ~ log(rprice) + log(rincome) | log(rincome) +  #> +     tdiff + I(tax/cpi), data = Cigs) #> > vcovCR(iv_fit_AER, cluster = Cigs$state, type = \"CR2\") #>              (Intercept) log(rprice) log(rincome) #> (Intercept)   0.31782384 -0.08285646   0.02774789 #> log(rprice)  -0.08285646  0.03453204  -0.03009923 #> log(rincome)  0.02774789 -0.03009923   0.04292233 #> > coef_test(iv_fit_AER, vcov = \"CR2\", cluster = Cigs$state) #>         Coef. Estimate    SE t-stat d.f. (Satt) p-val (Satt) Sig. #>   (Intercept)    9.736 0.564  17.27        22.0       <0.001  *** #>   log(rprice)   -1.229 0.186  -6.61        21.1       <0.001  *** #>  log(rincome)    0.257 0.207   1.24        23.5        0.227       pkgs_available <-    requireNamespace(\"AER\", quietly = TRUE) &    requireNamespace(\"ivreg\", quietly = TRUE) #> Registered S3 methods overwritten by 'ivreg': #>   method              from #>   anova.ivreg         AER  #>   hatvalues.ivreg     AER  #>   model.matrix.ivreg  AER  #>   predict.ivreg       AER  #>   print.ivreg         AER  #>   print.summary.ivreg AER  #>   summary.ivreg       AER  #>   terms.ivreg         AER  #>   update.ivreg        AER  #>   vcov.ivreg          AER   if (pkgs_available) withAutoprint ({  data(\"CigarettesSW\")   Cigs <- within(CigarettesSW, {     rprice <- price/cpi     rincome <- income/population/cpi     tdiff <- (taxs - tax)/cpi   }) iv_fit_ivreg <- ivreg::ivreg(log(packs) ~ log(rprice) + log(rincome) |                    log(rincome) + tdiff + I(tax/cpi), data = Cigs)   vcovCR(iv_fit_ivreg, cluster = Cigs$state, type = \"CR2\")   coef_test(iv_fit_ivreg, vcov = \"CR2\", cluster = Cigs$state) }) #> > data(\"CigarettesSW\") #> > Cigs <- within(CigarettesSW, { #> +     rprice <- price/cpi #> +     rincome <- income/population/cpi #> +     tdiff <- (taxs - tax)/cpi #> + }) #> > iv_fit_ivreg <- ivreg::ivreg(log(packs) ~ log(rprice) + log(rincome) |  #> +     log(rincome) + tdiff + I(tax/cpi), data = Cigs) #> > vcovCR(iv_fit_ivreg, cluster = Cigs$state, type = \"CR2\") #>              (Intercept) log(rprice) log(rincome) #> (Intercept)   0.31782384 -0.08285646   0.02774789 #> log(rprice)  -0.08285646  0.03453204  -0.03009923 #> log(rincome)  0.02774789 -0.03009923   0.04292233 #> > coef_test(iv_fit_ivreg, vcov = \"CR2\", cluster = Cigs$state) #>         Coef. Estimate    SE t-stat d.f. (Satt) p-val (Satt) Sig. #>   (Intercept)    9.736 0.564  17.27        22.0       <0.001  *** #>   log(rprice)   -1.229 0.186  -6.61        21.1       <0.001  *** #>  log(rincome)    0.257 0.207   1.24        23.5        0.227"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for an lm object. — vcovCR.lm","title":"Cluster-robust variance-covariance matrix for an lm object. — vcovCR.lm","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates lm object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for an lm object. — vcovCR.lm","text":"","code":"# S3 method for lm vcovCR(   obj,   cluster,   type,   target = NULL,   inverse_var = NULL,   form = \"sandwich\",   ... )"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for an lm object. — vcovCR.lm","text":"obj Fitted model calculate variance-covariance matrix cluster Expression vector indicating observations belong cluster. Required lm objects. type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working variance-covariance model used calculate CR2 CR4 adjustment matrices. vector, target matrix assumed diagonal. specified, target taken identity matrix. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for an lm object. — vcovCR.lm","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists   matrix estimated variance covariances   regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for an lm object. — vcovCR.lm","text":"","code":"data(\"ChickWeight\", package = \"datasets\") lm_fit <- lm(weight ~ Time + Diet:Time, data = ChickWeight) vcovCR(lm_fit, cluster = ChickWeight$Chick, type = \"CR2\") #>             (Intercept)       Time Time:Diet2 Time:Diet3 Time:Diet4 #> (Intercept)   3.9317840 -0.7851508 -0.2560762 -0.0750498  0.2695861 #> Time         -0.7851508  0.4360726 -0.3314209 -0.3436398 -0.3665016 #> Time:Diet2   -0.2560762 -0.3314209  1.3680862  0.3475327  0.3482061 #> Time:Diet3   -0.0750498 -0.3436398  0.3475327  1.1195632  0.3483146 #> Time:Diet4    0.2695861 -0.3665016  0.3482061  0.3483146  0.5416587  if (requireNamespace(\"plm\", quietly = TRUE)) withAutoprint({    data(\"Produc\", package = \"plm\")   lm_individual <- lm(log(gsp) ~ 0 + state + log(pcap) + log(pc) + log(emp) + unemp, data = Produc)   individual_index <- !grepl(\"state\", names(coef(lm_individual)))   vcovCR(lm_individual, cluster = Produc$state, type = \"CR2\")[individual_index,individual_index]    # compare to plm()   plm_FE <- plm::plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp,                       data = Produc, index = c(\"state\",\"year\"),                       effect = \"individual\", model = \"within\")   vcovCR(plm_FE, type=\"CR2\")    }) #> > data(\"Produc\", package = \"plm\") #> > lm_individual <- lm(log(gsp) ~ 0 + state + log(pcap) + log(pc) + log(emp) +  #> +     unemp, data = Produc) #> > individual_index <- !grepl(\"state\", names(coef(lm_individual))) #> > vcovCR(lm_individual, cluster = Produc$state, type = \"CR2\")[individual_index,  #> +     individual_index] #>               log(pcap)       log(pc)      log(emp)         unemp #> log(pcap)  3.900840e-03 -7.382313e-04 -0.0024837779 -7.825846e-05 #> log(pc)   -7.382313e-04  4.177767e-03 -0.0040101610 -9.960967e-05 #> log(emp)  -2.483778e-03 -4.010161e-03  0.0073152051  1.736024e-04 #> unemp     -7.825846e-05 -9.960967e-05  0.0001736024  6.745842e-06 #> > plm_FE <- plm::plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp,  #> +     data = Produc, index = c(\"state\", \"year\"), effect = \"individual\", model = \"within\") #> > vcovCR(plm_FE, type = \"CR2\") #>               log(pcap)       log(pc)      log(emp)         unemp #> log(pcap)  3.900840e-03 -7.382313e-04 -0.0024837779 -7.825846e-05 #> log(pc)   -7.382313e-04  4.177767e-03 -0.0040101610 -9.960967e-05 #> log(emp)  -2.483778e-03 -4.010161e-03  0.0073152051  1.736024e-04 #> unemp     -7.825846e-05 -9.960967e-05  0.0001736024  6.745842e-06"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lme.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for an lme object. — vcovCR.lme","title":"Cluster-robust variance-covariance matrix for an lme object. — vcovCR.lme","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates lme object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for an lme object. — vcovCR.lme","text":"","code":"# S3 method for lme vcovCR(obj, cluster, type, target, inverse_var, form = \"sandwich\", ...)"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for an lme object. — vcovCR.lme","text":"obj Fitted model calculate variance-covariance matrix cluster Optional expression vector indicating observations  belong cluster. specified, set  getGroups(obj). type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working  variance-covariance model used calculate CR2 CR4  adjustment matrices. specified, target taken estimated variance-covariance structure lme object. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for an lme object. — vcovCR.lme","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists    matrix estimated variance covariances    regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for an lme object. — vcovCR.lme","text":"","code":"if (requireNamespace(\"nlme\", quietly = TRUE)) {    library(nlme)   rat_weight <- lme(weight ~ Time * Diet, data=BodyWeight, ~ Time | Rat)    vcovCR(rat_weight, type = \"CR2\")  } #>              (Intercept)          Time         Diet2        Diet3    Time:Diet2 #> (Intercept)  20.50523572 -0.0586895628  -20.50523572 -20.50523572  0.0586895628 #> Time         -0.05868956  0.0008918201    0.05868956   0.05868956 -0.0008918201 #> Diet2       -20.50523572  0.0586895628 1192.99481298  20.50523572  0.3728534881 #> Diet3       -20.50523572  0.0586895628   20.50523572 238.25477649 -0.0586895628 #> Time:Diet2    0.05868956 -0.0008918201    0.37285349  -0.05868956  0.0458806483 #> Time:Diet3    0.05868956 -0.0008918201   -0.05868956  -1.87063320  0.0008918201 #>                Time:Diet3 #> (Intercept)  0.0586895628 #> Time        -0.0008918201 #> Diet2       -0.0586895628 #> Diet3       -1.8706331980 #> Time:Diet2   0.0008918201 #> Time:Diet3   0.0237304192  pkgs_available <-    requireNamespace(\"nlme\", quietly = TRUE) &    requireNamespace(\"mlmRev\", quietly = TRUE)  if (pkgs_available) {    data(egsingle, package = \"mlmRev\")   subset_ids <- levels(egsingle$schoolid)[1:10]   egsingle_subset <- subset(egsingle, schoolid %in% subset_ids)      math_model <- lme(math ~ year * size + female + black + hispanic,                      random = list(~ year | schoolid, ~ 1 | childid),                      data = egsingle_subset)                        vcovCR(math_model, type = \"CR2\")    } #>               (Intercept)          year          size    femaleMale #> (Intercept)  4.398970e-02  1.018504e-02 -5.251581e-05 -7.784067e-03 #> year         1.018504e-02  2.000100e-02 -6.243677e-06 -3.116308e-03 #> size        -5.251581e-05 -6.243677e-06  9.759313e-08  9.072820e-06 #> femaleMale  -7.784067e-03 -3.116308e-03  9.072820e-06  8.999071e-03 #> black1      -6.030535e-03 -5.258604e-03 -3.438467e-06 -5.458323e-03 #> hispanic1    1.347498e-02  4.667589e-03 -1.564763e-05 -4.631514e-03 #> year:size   -1.206983e-05 -2.477655e-05  9.626510e-09  1.923760e-06 #>                    black1     hispanic1     year:size #> (Intercept) -6.030535e-03  1.347498e-02 -1.206983e-05 #> year        -5.258604e-03  4.667589e-03 -2.477655e-05 #> size        -3.438467e-06 -1.564763e-05  9.626510e-09 #> femaleMale  -5.458323e-03 -4.631514e-03  1.923760e-06 #> black1       2.304693e-02  5.559583e-03  8.910563e-06 #> hispanic1    5.559583e-03  1.063522e-02 -4.438542e-06 #> year:size    8.910563e-06 -4.438542e-06  3.239673e-08"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lmerMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for an lmerMod object. — vcovCR.lmerMod","title":"Cluster-robust variance-covariance matrix for an lmerMod object. — vcovCR.lmerMod","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates merMod object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lmerMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for an lmerMod object. — vcovCR.lmerMod","text":"","code":"# S3 method for lmerMod vcovCR(obj, cluster, type, target, inverse_var, form = \"sandwich\", ...)"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lmerMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for an lmerMod object. — vcovCR.lmerMod","text":"obj Fitted model calculate variance-covariance matrix cluster Optional expression vector indicating observations  belong cluster. specified, set  getGroups(obj). type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working  variance-covariance model used calculate CR2 CR4  adjustment matrices. specified, target taken estimated variance-covariance structure lmerMod object. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lmerMod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for an lmerMod object. — vcovCR.lmerMod","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists    matrix estimated variance covariances    regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.lmerMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for an lmerMod object. — vcovCR.lmerMod","text":"","code":"if (requireNamespace(\"lme4\", quietly = TRUE)) {  library(lme4) sleep_fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy) vcovCR(sleep_fit, type = \"CR2\")  } #>  #> Attaching package: ‘lme4’ #> The following object is masked from ‘package:nlme’: #>  #>     lmList #>             (Intercept)      Days #> (Intercept)   46.574572 -1.451096 #> Days          -1.451096  2.389463  pkgs_available <-    requireNamespace(\"lme4\", quietly = TRUE) &    requireNamespace(\"mlmRev\", quietly = TRUE)  if (pkgs_available) {  data(egsingle, package = \"mlmRev\") subset_ids <- levels(egsingle$schoolid)[1:10] math_model <- lmer(math ~ year * size + female + black + hispanic                     + (1 | schoolid) + (1 | childid),                     data = egsingle, subset = schoolid %in% subset_ids) vcovCR(math_model, type = \"CR2\") } #> Warning: Some predictor variables are on very different scales: consider rescaling #>               (Intercept)          year          size    femaleMale #> (Intercept)  3.783504e-02  4.761424e-03 -4.339283e-05 -7.507229e-03 #> year         4.761424e-03  1.055863e-02 -2.769442e-06 -3.659318e-03 #> size        -4.339283e-05 -2.769442e-06  8.544313e-08  6.516501e-06 #> femaleMale  -7.507229e-03 -3.659318e-03  6.516501e-06  9.417936e-03 #> black1      -7.037054e-03  3.942316e-04 -1.389714e-06 -4.086193e-03 #> hispanic1    1.603050e-02  6.423355e-03 -1.644442e-05 -4.676825e-03 #> year:size   -6.313796e-06 -1.201793e-05  8.181337e-09  3.644258e-06 #>                    black1     hispanic1     year:size #> (Intercept) -7.037054e-03  1.603050e-02 -6.313796e-06 #> year         3.942316e-04  6.423355e-03 -1.201793e-05 #> size        -1.389714e-06 -1.644442e-05  8.181337e-09 #> femaleMale  -4.086193e-03 -4.676825e-03  3.644258e-06 #> black1       2.086591e-02  3.779849e-03  9.422996e-07 #> hispanic1    3.779849e-03  1.375137e-02 -6.919886e-06 #> year:size    9.422996e-07 -6.919886e-06  1.553385e-08"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.mlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for an mlm object. — vcovCR.mlm","title":"Cluster-robust variance-covariance matrix for an mlm object. — vcovCR.mlm","text":"vcovCR returns sandwich estimate variance-covariance matrix set regression coefficient estimates mlm object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.mlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for an mlm object. — vcovCR.mlm","text":"","code":"# S3 method for mlm vcovCR(obj, cluster, type, target, inverse_var, form = \"sandwich\", ...)"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.mlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for an mlm object. — vcovCR.mlm","text":"obj Fitted model calculate variance-covariance matrix cluster Optional expression vector indicating observations belong cluster. specified, row data treated separate cluster. type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working variance-covariance model used calculate CR2 CR4 adjustment matrices. specified, target taken identity matrix. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.mlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for an mlm object. — vcovCR.mlm","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists   matrix estimated variance covariances   regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.mlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for an mlm object. — vcovCR.mlm","text":"","code":"iris_fit <- lm(cbind(Sepal.Length, Sepal.Width) ~ Species +                 Petal.Length + Petal.Width, data = iris) Vcluster <- vcovCR(iris_fit, type = \"CR2\") Vcluster #>                                Sepal.Length:(Intercept) #> Sepal.Length:(Intercept)                    0.012547708 #> Sepal.Length:Speciesversicolor              0.013463389 #> Sepal.Length:Speciesvirginica               0.022738726 #> Sepal.Length:Petal.Length                  -0.007227063 #> Sepal.Length:Petal.Width                    0.002810727 #> Sepal.Width:(Intercept)                     0.006324275 #> Sepal.Width:Speciesversicolor               0.004545412 #> Sepal.Width:Speciesvirginica                0.007262239 #> Sepal.Width:Petal.Length                   -0.003231810 #> Sepal.Width:Petal.Width                     0.002072658 #>                                Sepal.Length:Speciesversicolor #> Sepal.Length:(Intercept)                         0.0134633889 #> Sepal.Length:Speciesversicolor                   0.0380390801 #> Sepal.Length:Speciesvirginica                    0.0579846604 #> Sepal.Length:Petal.Length                       -0.0087024291 #> Sepal.Length:Petal.Width                        -0.0109399201 #> Sepal.Width:(Intercept)                          0.0045454124 #> Sepal.Width:Speciesversicolor                    0.0125587855 #> Sepal.Width:Speciesvirginica                     0.0176278866 #> Sepal.Width:Petal.Length                        -0.0039842873 #> Sepal.Width:Petal.Width                         -0.0000394729 #>                                Sepal.Length:Speciesvirginica #> Sepal.Length:(Intercept)                         0.022738726 #> Sepal.Length:Speciesversicolor                   0.057984660 #> Sepal.Length:Speciesvirginica                    0.096974290 #> Sepal.Length:Petal.Length                       -0.013179441 #> Sepal.Length:Petal.Width                        -0.021314939 #> Sepal.Width:(Intercept)                          0.007262239 #> Sepal.Width:Speciesversicolor                    0.017627887 #> Sepal.Width:Speciesvirginica                     0.026715559 #> Sepal.Width:Petal.Length                        -0.005518284 #> Sepal.Width:Petal.Width                         -0.001400422 #>                                Sepal.Length:Petal.Length #> Sepal.Length:(Intercept)                    -0.007227063 #> Sepal.Length:Speciesversicolor              -0.008702429 #> Sepal.Length:Speciesvirginica               -0.013179441 #> Sepal.Length:Petal.Length                    0.005876684 #> Sepal.Length:Petal.Width                    -0.006412572 #> Sepal.Width:(Intercept)                     -0.003231810 #> Sepal.Width:Speciesversicolor               -0.003984287 #> Sepal.Width:Speciesvirginica                -0.005518284 #> Sepal.Width:Petal.Length                     0.002335906 #> Sepal.Width:Petal.Width                     -0.001991957 #>                                Sepal.Length:Petal.Width Sepal.Width:(Intercept) #> Sepal.Length:(Intercept)                   0.0028107268             0.006324275 #> Sepal.Length:Speciesversicolor            -0.0109399201             0.004545412 #> Sepal.Length:Speciesvirginica             -0.0213149395             0.007262239 #> Sepal.Length:Petal.Length                 -0.0064125723            -0.003231810 #> Sepal.Length:Petal.Width                   0.0272498285             0.002072658 #> Sepal.Width:(Intercept)                    0.0020726578             0.013117244 #> Sepal.Width:Speciesversicolor             -0.0000394729             0.013714416 #> Sepal.Width:Speciesvirginica              -0.0014004219             0.019456928 #> Sepal.Width:Petal.Length                  -0.0019919567            -0.007453511 #> Sepal.Width:Petal.Width                    0.0049052390             0.003506130 #>                                Sepal.Width:Speciesversicolor #> Sepal.Length:(Intercept)                        0.0045454124 #> Sepal.Length:Speciesversicolor                  0.0125587855 #> Sepal.Length:Speciesvirginica                   0.0176278866 #> Sepal.Length:Petal.Length                      -0.0039842873 #> Sepal.Length:Petal.Width                       -0.0000394729 #> Sepal.Width:(Intercept)                         0.0137144162 #> Sepal.Width:Speciesversicolor                   0.0349169656 #> Sepal.Width:Speciesvirginica                    0.0472678537 #> Sepal.Width:Petal.Length                       -0.0105186360 #> Sepal.Width:Petal.Width                        -0.0025487274 #>                                Sepal.Width:Speciesvirginica #> Sepal.Length:(Intercept)                        0.007262239 #> Sepal.Length:Speciesversicolor                  0.017627887 #> Sepal.Length:Speciesvirginica                   0.026715559 #> Sepal.Length:Petal.Length                      -0.005518284 #> Sepal.Length:Petal.Width                       -0.001400422 #> Sepal.Width:(Intercept)                         0.019456928 #> Sepal.Width:Speciesversicolor                   0.047267854 #> Sepal.Width:Speciesvirginica                    0.069056876 #> Sepal.Width:Petal.Length                       -0.013526991 #> Sepal.Width:Petal.Width                        -0.007668001 #>                                Sepal.Width:Petal.Length Sepal.Width:Petal.Width #> Sepal.Length:(Intercept)                   -0.003231810            0.0020726578 #> Sepal.Length:Speciesversicolor             -0.003984287           -0.0000394729 #> Sepal.Length:Speciesvirginica              -0.005518284           -0.0014004219 #> Sepal.Length:Petal.Length                   0.002335906           -0.0019919567 #> Sepal.Length:Petal.Width                   -0.001991957            0.0049052390 #> Sepal.Width:(Intercept)                    -0.007453511            0.0035061303 #> Sepal.Width:Speciesversicolor              -0.010518636           -0.0025487274 #> Sepal.Width:Speciesvirginica               -0.013526991           -0.0076680010 #> Sepal.Width:Petal.Length                    0.005576498           -0.0042578708 #> Sepal.Width:Petal.Width                    -0.004257871            0.0131707991"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.plm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for a plm object. — vcovCR.plm","title":"Cluster-robust variance-covariance matrix for a plm object. — vcovCR.plm","text":"vcovCR returns sandwich estimate variance-covariance matrix set regression coefficient estimates plm object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.plm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for a plm object. — vcovCR.plm","text":"","code":"# S3 method for plm vcovCR(   obj,   cluster,   type,   target,   inverse_var,   form = \"sandwich\",   ignore_FE = FALSE,   ... )"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.plm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for a plm object. — vcovCR.plm","text":"obj Fitted model calculate variance-covariance matrix cluster Optional character string, expression, vector indicating observations belong cluster. fixed-effect models include individual effects time effects (), cluster taken equal included fixed effects otherwise specified. Clustering individuals can also obtained specifying name individual index (e.g., cluster = \"state\") cluster = \"individual\"; clustering time periods can obtained specifying name time index (e.g., cluster = \"year\") cluster = \"time\"; group index specified, clustering groups (individuals nested) can obtained specifying name group index cluster = \"group\". random-effects models, cluster taken equal included random effect identifier otherwise specified. type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working variance-covariance model used calculate CR2 CR4 adjustment matrices. default, target taken identity matrix fixed effect models estimated compound-symmetric covariance matrix random effects models. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ignore_FE Optional logical controlling whether fixed effects ignored calculating small-sample adjustments models fixed effects estimated absorption. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.plm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for a plm object. — vcovCR.plm","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists   matrix estimated variance covariances   regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.plm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for a plm object. — vcovCR.plm","text":"","code":"if (requireNamespace(\"plm\", quietly = TRUE)) withAutoprint({    library(plm)   # fixed effects   data(\"Produc\", package = \"plm\")   plm_FE <- plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp,                 data = Produc, index = c(\"state\",\"year\",\"region\"),                 effect = \"individual\", model = \"within\")   vcovCR(plm_FE, type=\"CR2\")   vcovCR(plm_FE, type = \"CR2\", cluster = Produc$region) # clustering on region      # random effects   plm_RE <- update(plm_FE, model = \"random\")   vcovCR(plm_RE, type = \"CR2\")   vcovCR(plm_RE, type = \"CR2\", cluster = Produc$region) # clustering on region      # nested random effects   plm_nested <- update(plm_FE, effect = \"nested\", model = \"random\")   vcovCR(plm_nested, type = \"CR2\") # clustering on region }) #> > library(plm) #> > data(\"Produc\", package = \"plm\") #> > plm_FE <- plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp, data = Produc,  #> +     index = c(\"state\", \"year\", \"region\"), effect = \"individual\", model = \"within\") #> > vcovCR(plm_FE, type = \"CR2\") #>               log(pcap)       log(pc)      log(emp)         unemp #> log(pcap)  3.900840e-03 -7.382313e-04 -0.0024837779 -7.825846e-05 #> log(pc)   -7.382313e-04  4.177767e-03 -0.0040101610 -9.960967e-05 #> log(emp)  -2.483778e-03 -4.010161e-03  0.0073152051  1.736024e-04 #> unemp     -7.825846e-05 -9.960967e-05  0.0001736024  6.745842e-06 #> > vcovCR(plm_FE, type = \"CR2\", cluster = Produc$region) #>               log(pcap)       log(pc)      log(emp)         unemp #> log(pcap)  6.973505e-03 -0.0022279395 -0.0044833594 -6.786254e-05 #> log(pc)   -2.227940e-03  0.0054359010 -0.0043767642 -1.297104e-04 #> log(emp)  -4.483359e-03 -0.0043767642  0.0108260634  2.011267e-04 #> unemp     -6.786254e-05 -0.0001297104  0.0002011267  1.170089e-05 #> > plm_RE <- update(plm_FE, model = \"random\") #> > vcovCR(plm_RE, type = \"CR2\") #>               (Intercept)     log(pcap)       log(pc)      log(emp) #> (Intercept)  0.0608153880 -8.772256e-03 -7.015754e-03  0.0136354448 #> log(pcap)   -0.0087722560  3.221991e-03  3.731861e-05 -0.0031502393 #> log(pc)     -0.0070157539  3.731861e-05  2.060851e-03 -0.0020993882 #> log(emp)     0.0136354448 -3.150239e-03 -2.099388e-03  0.0054047466 #> unemp        0.0004200323 -7.947309e-05 -6.416279e-05  0.0001390737 #>                     unemp #> (Intercept)  4.200323e-04 #> log(pcap)   -7.947309e-05 #> log(pc)     -6.416279e-05 #> log(emp)     1.390737e-04 #> unemp        5.848168e-06 #> > vcovCR(plm_RE, type = \"CR2\", cluster = Produc$region) #>               (Intercept)     log(pcap)       log(pc)      log(emp) #> (Intercept)  0.0565942863 -0.0138696773 -0.0056768267  0.0190768009 #> log(pcap)   -0.0138696773  0.0065345184 -0.0003786724 -0.0063601303 #> log(pc)     -0.0056768267 -0.0003786724  0.0024373929 -0.0022193705 #> log(emp)     0.0190768009 -0.0063601303 -0.0022193705  0.0091711531 #> unemp        0.0004716871 -0.0000926249 -0.0000839537  0.0001715663 #>                     unemp #> (Intercept)  4.716871e-04 #> log(pcap)   -9.262490e-05 #> log(pc)     -8.395370e-05 #> log(emp)     1.715663e-04 #> unemp        1.057574e-05 #> > plm_nested <- update(plm_FE, effect = \"nested\", model = \"random\") #> > vcovCR(plm_nested, type = \"CR2\") #>               (Intercept)     log(pcap)       log(pc)      log(emp) #> (Intercept)  0.0537315947 -1.210951e-02 -0.0073309652  0.0193853190 #> log(pcap)   -0.0121095110  6.078432e-03 -0.0003141431 -0.0060636185 #> log(pc)     -0.0073309652 -3.141431e-04  0.0027593587 -0.0025387198 #> log(emp)     0.0193853190 -6.063618e-03 -0.0025387198  0.0091748282 #> unemp        0.0005354663 -9.267671e-05 -0.0001000830  0.0001852566 #>                     unemp #> (Intercept)  5.354663e-04 #> log(pcap)   -9.267671e-05 #> log(pc)     -1.000830e-04 #> log(emp)     1.852566e-04 #> unemp        1.135799e-05  pkgs_available <- requireNamespace(\"plm\", quietly = TRUE) & requireNamespace(\"AER\", quietly = TRUE)  if (pkgs_available) withAutoprint({   # first differencing   data(Fatalities, package = \"AER\")   Fatalities <- within(Fatalities, {     frate <- 10000 * fatal / pop     drinkagec <- cut(drinkage, breaks = 18:22, include.lowest = TRUE, right = FALSE)     drinkagec <- relevel(drinkagec, ref = 4)   })    plm_FD <- plm(frate ~ beertax + drinkagec + miles + unemp + log(income),                 data = Fatalities, index = c(\"state\", \"year\"),                 model = \"fd\")   vcovHC(plm_FD, method=\"arellano\", type = \"sss\", cluster = \"group\")   vcovCR(plm_FD, type = \"CR1S\")   vcovCR(plm_FD, type = \"CR2\")    }) #> > data(Fatalities, package = \"AER\") #> > Fatalities <- within(Fatalities, { #> +     frate <- 10000 * fatal/pop #> +     drinkagec <- cut(drinkage, breaks = 18:22, include.lowest = TRUE, right = FALSE) #> +     drinkagec <- relevel(drinkagec, ref = 4) #> + }) #> > plm_FD <- plm(frate ~ beertax + drinkagec + miles + unemp + log(income),  #> +     data = Fatalities, index = c(\"state\", \"year\"), model = \"fd\") #> > vcovHC(plm_FD, method = \"arellano\", type = \"sss\", cluster = \"group\") #>                    (Intercept)       beertax drinkagec[18,19) drinkagec[19,20) #> (Intercept)       4.491252e-04  1.312107e-03     3.177175e-05    -3.224139e-05 #> beertax           1.312107e-03  6.112682e-02    -1.374164e-03    -2.155192e-03 #> drinkagec[18,19)  3.177175e-05 -1.374164e-03     5.978249e-03     2.531421e-03 #> drinkagec[19,20) -3.224139e-05 -2.155192e-03     2.531421e-03     2.130959e-03 #> drinkagec[20,21) -2.531288e-04 -9.279081e-04     1.738413e-03     1.185214e-03 #> miles             4.688676e-09 -1.642830e-07    -8.440044e-08    -5.492005e-08 #> unemp            -7.197958e-05 -3.079273e-04    -4.794408e-05    -3.200981e-05 #> log(income)      -1.853129e-02 -2.489411e-02     3.443431e-03     4.787025e-03 #>                  drinkagec[20,21)         miles         unemp   log(income) #> (Intercept)         -2.531288e-04  4.688676e-09 -7.197958e-05 -1.853129e-02 #> beertax             -9.279081e-04 -1.642830e-07 -3.079273e-04 -2.489411e-02 #> drinkagec[18,19)     1.738413e-03 -8.440044e-08 -4.794408e-05  3.443431e-03 #> drinkagec[19,20)     1.185214e-03 -5.492005e-08 -3.200981e-05  4.787025e-03 #> drinkagec[20,21)     2.529571e-03 -9.131630e-08  1.900456e-04  1.890722e-02 #> miles               -9.131630e-08  1.570809e-11  1.928974e-09 -6.148657e-07 #> unemp                1.900456e-04  1.928974e-09  1.970444e-04  8.234312e-03 #> log(income)          1.890722e-02 -6.148657e-07  8.234312e-03  1.034150e+00 #> attr(,\"cluster\") #> [1] \"group\" #> > vcovCR(plm_FD, type = \"CR1S\") #>                    (Intercept)       beertax drinkagec[18,19) drinkagec[19,20) #> (Intercept)       4.491252e-04  1.312107e-03     3.177175e-05    -3.224139e-05 #> beertax           1.312107e-03  6.112682e-02    -1.374164e-03    -2.155192e-03 #> drinkagec[18,19)  3.177175e-05 -1.374164e-03     5.978249e-03     2.531421e-03 #> drinkagec[19,20) -3.224139e-05 -2.155192e-03     2.531421e-03     2.130959e-03 #> drinkagec[20,21) -2.531288e-04 -9.279081e-04     1.738413e-03     1.185214e-03 #> miles             4.688676e-09 -1.642830e-07    -8.440044e-08    -5.492005e-08 #> unemp            -7.197958e-05 -3.079273e-04    -4.794408e-05    -3.200981e-05 #> log(income)      -1.853129e-02 -2.489411e-02     3.443431e-03     4.787025e-03 #>                  drinkagec[20,21)         miles         unemp   log(income) #> (Intercept)         -2.531288e-04  4.688676e-09 -7.197958e-05 -1.853129e-02 #> beertax             -9.279081e-04 -1.642830e-07 -3.079273e-04 -2.489411e-02 #> drinkagec[18,19)     1.738413e-03 -8.440044e-08 -4.794408e-05  3.443431e-03 #> drinkagec[19,20)     1.185214e-03 -5.492005e-08 -3.200981e-05  4.787025e-03 #> drinkagec[20,21)     2.529571e-03 -9.131630e-08  1.900456e-04  1.890722e-02 #> miles               -9.131630e-08  1.570809e-11  1.928974e-09 -6.148657e-07 #> unemp                1.900456e-04  1.928974e-09  1.970444e-04  8.234312e-03 #> log(income)          1.890722e-02 -6.148657e-07  8.234312e-03  1.034150e+00 #> > vcovCR(plm_FD, type = \"CR2\") #>                    (Intercept)       beertax drinkagec[18,19) drinkagec[19,20) #> (Intercept)       4.926777e-04  0.0014903060     5.194011e-05    -1.917433e-05 #> beertax           1.490306e-03  0.0639227452    -1.545309e-03    -2.356755e-03 #> drinkagec[18,19)  5.194011e-05 -0.0015453092     6.783986e-03     2.627033e-03 #> drinkagec[19,20) -1.917433e-05 -0.0023567549     2.627033e-03     2.182684e-03 #> drinkagec[20,21) -2.585076e-04 -0.0011673142     1.811511e-03     1.193471e-03 #> miles            -1.036421e-07 -0.0000011056    -1.901583e-07    -1.298187e-07 #> unemp            -7.270549e-05 -0.0002748930    -3.606990e-05    -3.739358e-05 #> log(income)      -1.903417e-02 -0.0209995682     3.953875e-03     4.817831e-03 #>                  drinkagec[20,21)         miles         unemp   log(income) #> (Intercept)         -2.585076e-04 -1.036421e-07 -7.270549e-05 -1.903417e-02 #> beertax             -1.167314e-03 -1.105600e-06 -2.748930e-04 -2.099957e-02 #> drinkagec[18,19)     1.811511e-03 -1.901583e-07 -3.606990e-05  3.953875e-03 #> drinkagec[19,20)     1.193471e-03 -1.298187e-07 -3.739358e-05  4.817831e-03 #> drinkagec[20,21)     2.626823e-03 -1.514746e-07  1.955850e-04  1.969001e-02 #> miles               -1.514746e-07  4.431806e-10 -5.460872e-10 -1.329604e-06 #> unemp                1.955850e-04 -5.460872e-10  2.005515e-04  8.377011e-03 #> log(income)          1.969001e-02 -1.329604e-06  8.377011e-03  1.065829e+00"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.mv.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.rma.mv","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.rma.mv","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates  rma.mv object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.mv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.rma.mv","text":"","code":"# S3 method for rma.mv vcovCR(obj, cluster, type, target, inverse_var, form = \"sandwich\", ...)"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.mv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.rma.mv","text":"obj Fitted model calculate variance-covariance matrix cluster Optional expression vector indicating observations  belong cluster. specified, set factor random-effects structure fewest distinct levels. Caveat emptor: function check random effects nested. type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working  variance-covariance model used calculate CR2 CR4  adjustment matrices. specified, target taken  estimated variance-covariance structure rma.mv object. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.mv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.rma.mv","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists    matrix estimated variance covariances    regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.mv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.rma.mv","text":"","code":"pkgs_available <-    requireNamespace(\"metafor\", quietly = TRUE) &    requireNamespace(\"metadat\", quietly = TRUE)  if (pkgs_available) withAutoprint({  library(metafor) data(dat.assink2016, package = \"metadat\")  mfor_fit <- rma.mv(yi ~ year + deltype,                   V = vi, random = ~ 1 | study / esid,                  data = dat.assink2016) mfor_fit  mfor_CR2 <- vcovCR(mfor_fit, type = \"CR2\") mfor_CR2  coef_test(mfor_fit, vcov = mfor_CR2, test = c(\"Satterthwaite\", \"saddlepoint\")) Wald_test(mfor_fit, constraints = constrain_zero(3:4), vcov = mfor_CR2)  }) #> > library(metafor) #> > data(dat.assink2016, package = \"metadat\") #> > mfor_fit <- rma.mv(yi ~ year + deltype, V = vi, random = ~1 | study/esid,  #> +     data = dat.assink2016) #> > mfor_fit #>  #> Multivariate Meta-Analysis Model (k = 100; method: REML) #>  #> Variance Components: #>  #>             estim    sqrt  nlvls  fixed      factor  #> sigma^2.1  0.1493  0.3863     17     no       study  #> sigma^2.2  0.0853  0.2920    100     no  study/esid  #>  #> Test for Residual Heterogeneity: #> QE(df = 96) = 610.2644, p-val < .0001 #>  #> Test of Moderators (coefficients 2:4): #> QM(df = 3) = 19.2399, p-val = 0.0002 #>  #> Model Results: #>  #>                 estimate      se     zval    pval    ci.lb    ci.ub     ​  #> intrcpt          -0.2438  0.2101  -1.1605  0.2458  -0.6556   0.1680       #> year             -0.0380  0.0183  -2.0773  0.0378  -0.0738  -0.0021    *  #> deltypegeneral    0.7094  0.1914   3.7069  0.0002   0.3343   1.0845  ***  #> deltypeovert      0.5054  0.2099   2.4078  0.0160   0.0940   0.9168    *  #>  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> > mfor_CR2 <- vcovCR(mfor_fit, type = \"CR2\") #> > mfor_CR2 #>                     intrcpt          year deltypegeneral deltypeovert #> intrcpt         0.015081059 -0.0020131555  -0.0036579995 -0.007130740 #> year           -0.002013156  0.0007603265  -0.0002607379  0.000218784 #> deltypegeneral -0.003658000 -0.0002607379   0.0042972555  0.004769307 #> deltypeovert   -0.007130740  0.0002187840   0.0047693066  0.010075586 #> > coef_test(mfor_fit, vcov = mfor_CR2, test = c(\"Satterthwaite\", \"saddlepoint\")) #>           Coef. Estimate     SE t-stat d.f. (Satt) p-val (Satt) Sig.  s.p. #>         intrcpt   -0.244 0.1228  -1.99        5.35      0.10015      0.327 #>            year   -0.038 0.0276  -1.38        7.22      0.20977      0.209 #>  deltypegeneral    0.709 0.0656  10.82        2.25      0.00555   ** 0.437 #>    deltypeovert    0.505 0.1004   5.03        2.03      0.03614    * 0.344 #>  p-val (Saddle) Sig. #>          0.0915    . #>          0.2103      #>          <0.001  *** #>          0.0278    * #> > Wald_test(mfor_fit, constraints = constrain_zero(3:4), vcov = mfor_CR2) #>  test Fstat df_num df_denom p_val sig #>   HTZ  30.6      2    0.842 0.164"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for a rma.uni object. — vcovCR.rma.uni","title":"Cluster-robust variance-covariance matrix for a rma.uni object. — vcovCR.rma.uni","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates  rma.uni object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for a rma.uni object. — vcovCR.rma.uni","text":"","code":"# S3 method for rma.uni vcovCR(obj, cluster, type, target, inverse_var, form = \"sandwich\", ...)"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for a rma.uni object. — vcovCR.rma.uni","text":"obj Fitted model calculate variance-covariance matrix cluster Expression vector indicating observations  belong cluster. Required rma.uni objects. type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working  variance-covariance model used calculate CR2 CR4  adjustment matrices. specified, target taken diagonal entries equal estimated marginal variance effect sizes. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for a rma.uni object. — vcovCR.rma.uni","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists    matrix estimated variance covariances    regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.rma.uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for a rma.uni object. — vcovCR.rma.uni","text":"","code":"pkgs_available <-    requireNamespace(\"metafor\", quietly = TRUE) &    requireNamespace(\"metadat\", quietly = TRUE)    if (pkgs_available) withAutoprint({  library(metafor) data(dat.assink2016, package = \"metadat\")  mfor_fit <- rma.uni(yi ~ year + deltype, vi = vi,                   data = dat.assink2016) mfor_fit  mfor_CR2 <- vcovCR(mfor_fit, type = \"CR2\", cluster = dat.assink2016$study) mfor_CR2 coef_test(mfor_fit, vcov = mfor_CR2, test = c(\"Satterthwaite\", \"saddlepoint\")) Wald_test(mfor_fit, constraints = constrain_zero(2:4), vcov = mfor_CR2)  }) #> > library(metafor) #> > data(dat.assink2016, package = \"metadat\") #> > mfor_fit <- rma.uni(yi ~ year + deltype, vi = vi, data = dat.assink2016) #> > mfor_fit #>  #> Mixed-Effects Model (k = 100; tau^2 estimator: REML) #>  #> tau^2 (estimated amount of residual heterogeneity):     0.2016 (SE = 0.0373) #> tau (square root of estimated tau^2 value):             0.4490 #> I^2 (residual heterogeneity / unaccounted variability): 89.68% #> H^2 (unaccounted variability / sampling variability):   9.69 #> R^2 (amount of heterogeneity accounted for):            47.74% #>  #> Test for Residual Heterogeneity: #> QE(df = 96) = 610.2644, p-val < .0001 #>  #> Test of Moderators (coefficients 2:4): #> QM(df = 3) = 66.1189, p-val < .0001 #>  #> Model Results: #>  #>                 estimate      se     zval    pval    ci.lb    ci.ub     ​  #> intrcpt           0.0197  0.1724   0.1143  0.9090  -0.3181   0.3575       #> year             -0.0682  0.0098  -6.9476  <.0001  -0.0874  -0.0490  ***  #> deltypegeneral    0.5499  0.1827   3.0097  0.0026   0.1918   0.9079   **  #> deltypeovert      0.5606  0.2226   2.5186  0.0118   0.1244   0.9969    *  #>  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> > mfor_CR2 <- vcovCR(mfor_fit, type = \"CR2\", cluster = dat.assink2016$study) #> > mfor_CR2 #>                     intrcpt          year deltypegeneral  deltypeovert #> intrcpt         0.004914493 -0.0017836453   0.0019509336 -0.0022872378 #> year           -0.001783645  0.0007185062  -0.0008482905  0.0004549436 #> deltypegeneral  0.001950934 -0.0008482905   0.0083677591  0.0016321051 #> deltypeovert   -0.002287238  0.0004549436   0.0016321051  0.0060609926 #> > coef_test(mfor_fit, vcov = mfor_CR2, test = c(\"Satterthwaite\", \"saddlepoint\")) #>           Coef. Estimate     SE t-stat d.f. (Satt) p-val (Satt) Sig.   s.p. #>         intrcpt   0.0197 0.0701  0.281        6.44       0.7875      -5.009 #>            year  -0.0682 0.0268 -2.544        6.00       0.0438    *  0.375 #>  deltypegeneral   0.5499 0.0915  6.011        8.97       <0.001  ***  0.446 #>    deltypeovert   0.5606 0.0779  7.201        1.95       0.0200    *  0.375 #>  p-val (Saddle) Sig. #>          0.7774      #>          0.0380    * #>          <0.001  *** #>          0.0088   ** #> > Wald_test(mfor_fit, constraints = constrain_zero(2:4), vcov = mfor_CR2) #>  test Fstat df_num df_denom p_val sig #>   HTZ  14.9      3     2.63 0.036   *"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.robu.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.robu","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.robu","text":"vcovCR returns sandwich estimate variance-covariance matrix  set regression coefficient estimates robu object.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.robu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.robu","text":"","code":"# S3 method for robu vcovCR(obj, cluster, type, target, inverse_var, form = \"sandwich\", ...)"},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.robu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.robu","text":"obj Fitted model calculate variance-covariance matrix cluster Optional expression vector indicating observations  belong cluster. specified, set studynum used fitting robu object. type Character string specifying small-sample adjustment  used, available options \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See \"Details\" section  vcovCR information. target Optional matrix vector describing working  variance-covariance model used calculate CR2 CR4  adjustment matrices. specified, target taken  inverse estimated weights used fitting robu object. inverse_var Optional logical indicating whether weights used  fitting model inverse-variance. specified, vcovCR  attempt infer value. form Controls form returned matrix. default  \"sandwich\" return sandwich variance-covariance matrix.  Alternately, setting form = \"meat\" return meat  sandwich setting form = B, B matrix  appropriate dimension, return sandwich variance-covariance matrix  calculated using B bread. form = \"estfun\" return  (appropriately scaled) estimating function, transposed crossproduct  equal sandwich variance-covariance matrix. ... Additional arguments available classes objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.robu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.robu","text":"object class c(\"vcovCR\",\"clubSandwich\"), consists    matrix estimated variance covariances    regression coefficient estimates.","code":""},{"path":[]},{"path":"http://jepusto.github.io/clubSandwich/reference/vcovCR.robu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster-robust variance-covariance matrix for a robu object. — vcovCR.robu","text":"","code":"if (requireNamespace(\"robumeta\", quietly = TRUE)) withAutoprint({ library(robumeta) data(hierdat)  robu_fit <- robu(effectsize ~ binge + followup + sreport + age,                   data = hierdat, studynum = studyid,                   var.eff.size = var, modelweights = \"HIER\") robu_fit  robu_CR2 <- vcovCR(robu_fit, type = \"CR2\") robu_CR2 coef_test(robu_fit, vcov = robu_CR2, test = c(\"Satterthwaite\", \"saddlepoint\"))  Wald_test(robu_fit, constraints = constrain_zero(c(2,4)), vcov = robu_CR2) Wald_test(robu_fit, constraints = constrain_zero(2:5), vcov = robu_CR2)  }) #> > library(robumeta) #> > data(hierdat) #> > robu_fit <- robu(effectsize ~ binge + followup + sreport + age, data = hierdat,  #> +     studynum = studyid, var.eff.size = var, modelweights = \"HIER\") #> > robu_fit #> RVE: Hierarchical Effects Model with Small-Sample Corrections  #>  #> Model: effectsize ~ binge + followup + sreport + age  #>  #> Number of clusters = 15  #> Number of outcomes = 68 (min = 1 , mean = 4.53 , median = 2 , max = 29 ) #> Omega.sq = 0.1086551  #> Tau.sq = 0.02362071  #>  #>                Estimate   StdErr t-value  dfs P(|t|>) 95% CI.L 95% CI.U Sig #> 1 X.Intercept.  0.39695 0.658006   0.603 3.06  0.5882 -1.67534  2.46924     #> 2        binge  0.45158 0.101641   4.443 3.59  0.0144  0.15628  0.74689  ** #> 3     followup  0.00133 0.000723   1.842 2.03  0.2048 -0.00173  0.00439     #> 4      sreport  0.53876 0.143398   3.757 4.36  0.0170  0.15324  0.92428  ** #> 5          age -0.04371 0.037874  -1.154 2.69  0.3404 -0.17235  0.08492     #> --- #> Signif. codes: < .01 *** < .05 ** < .10 * #> --- #> Note: If df < 4, do not trust the results> robu_CR2 <- vcovCR(robu_fit, type = \"CR2\") #> > robu_CR2 #>               X.Intercept.         binge      followup       sreport #> X.Intercept.  0.4329720570 -8.055322e-03 -2.957783e-04 -7.180868e-04 #> binge        -0.0080553221  1.033098e-02 -1.580973e-05  3.890863e-03 #> followup     -0.0002957783 -1.580973e-05  5.221116e-07 -1.951302e-05 #> sreport      -0.0007180868  3.890863e-03 -1.951302e-05  2.056284e-02 #> age          -0.0245235730  3.757319e-04  1.683702e-05 -8.892270e-04 #>                        age #> X.Intercept. -2.452357e-02 #> binge         3.757319e-04 #> followup      1.683702e-05 #> sreport      -8.892270e-04 #> age           1.434475e-03 #> > coef_test(robu_fit, vcov = robu_CR2, test = c(\"Satterthwaite\", \"saddlepoint\")) #>         Coef. Estimate       SE t-stat d.f. (Satt) p-val (Satt) Sig.    s.p. #>  X.Intercept.  0.39695 0.658006  0.603        3.06       0.5882      -0.6440 #>         binge  0.45158 0.101641  4.443        3.59       0.0144    *  0.4170 #>      followup  0.00133 0.000723  1.842        2.03       0.2048       0.2537 #>       sreport  0.53876 0.143398  3.757        4.36       0.0170    *  0.4112 #>           age -0.04371 0.037874 -1.154        2.69       0.3404       0.0919 #>  p-val (Saddle) Sig. #>         0.59343      #>         0.00424   ** #>         0.18900      #>         0.00767   ** #>         0.34522      #> > Wald_test(robu_fit, constraints = constrain_zero(c(2, 4)), vcov = robu_CR2) #>  test Fstat df_num df_denom  p_val sig #>   HTZ  10.4      2     3.48 0.0339   * #> > Wald_test(robu_fit, constraints = constrain_zero(2:5), vcov = robu_CR2) #>  test Fstat df_num df_denom p_val sig #>   HTZ 0.176      4   0.0388 0.962"},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-058","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.5.8","title":"clubSandwich 0.5.8","text":"Added support ivreg::ivreg objects estimated ordinary least squares (support objects estimated 2SM 2SMM yet implemented). Updated unit tests plm::plm() method = \"FD\" account bug fixes version 2.6-2 plm.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-057","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.5.7","title":"clubSandwich 0.5.7","text":"CRAN release: 2022-06-15 Fixed bug methods multi-variate multi-level models estimated lme(). Updated vignettes, examples, unit tests package can compiled without packages SUGGESTS.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-056","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.5.6","title":"clubSandwich 0.5.6","text":"CRAN release: 2022-04-23 Corrected bug methods plm objects estimated random effects, occurred user-specified clustering variable higher level random effects. Added support plm objects nested random effects (effects = \"nested\"). Added additional syntactic options specifying clustering variable plm objects. See ?plm. Corrected bug Wald_test() labeled results test = \"Naive-Fp\".","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-055","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.5.5","title":"clubSandwich 0.5.5","text":"CRAN release: 2022-01-18 New function linear_contrast() calculates robust confidence intervals p-values linear contrasts regression coefficients fitted model. Works constrain_pairwise() constrain_*() helper functions. Corrected precision unit test leading error M1mac.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-054","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.5.4","title":"clubSandwich 0.5.4","text":"CRAN release: 2022-01-09","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"new-features-0-5-4","dir":"Changelog","previous_headings":"","what":"New features","title":"clubSandwich 0.5.4","text":"Wald_test() gains option test = \"Naive-Fp\", uses denominator degrees freedom equal number clusters minus number coefficients fitted model. coef_test() conf_int() gain option test = \"naive-tp\", uses denominator degrees freedom equal number clusters minus number coefficients fitted model.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"minor-improvements-and-bug-fixes-0-5-4","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"clubSandwich 0.5.4","text":"Corrected bug Satterthwaite degrees freedom calculations models include intercept. Output coef_test() conf_int() now include variable containing coefficient names, results “tidy.” conf_int() now includes option report p-value coefficient. coef_test() now reports degrees freedom test = 'z' test = 'naive-t'. vcovCR() now provides informative error message clustering variable constant. vcovCR() now handles models estimated using analytic weights, weights equal zero. Results consistent omitting observations weights zero. Added informative error messages Wald_test() conf_int(), triggered test argument match available tests. Corrected bug findCluster.rma.mv(), threw error random effects factor rma.mv model unobserved levels. Corrected bug Wald_test(), threw error tests intercept-models. Fixed minor bug print method Wald_test() results, threw error p-value NA.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-053","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.5.3","title":"clubSandwich 0.5.3","text":"CRAN release: 2021-01-23 Removed dependency mathjaxr","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-052","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.5.2","title":"clubSandwich 0.5.2","text":"CRAN release: 2020-11-14 Added mathjaxr Imports","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-051","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.5.1","title":"clubSandwich 0.5.1","text":"CRAN release: 2020-10-12","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"new-features-0-5-1","dir":"Changelog","previous_headings":"","what":"New features","title":"clubSandwich 0.5.1","text":"Compute covariance matrices AR1 correlation structure combination constant correlation AR1 correlation structure. Compute covariance matrices blocked subgroup. Average variance estimates cluster computing covariance matrices. New function pattern_covariance_matrix(), creates covariance matrix based specified pattern correlations different categories effects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"minor-improvements-and-bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"clubSandwich 0.5.1","text":"Corrected bug methods rma.mv objects, previously led incorrect identification clustering variables models multiple levels random effects, least one set random effects inner | outer structure.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-050","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.5.0","title":"clubSandwich 0.5.0","text":"CRAN release: 2020-09-01","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"new-features-a-major-update-to-wald_test-0-5-0","dir":"Changelog","previous_headings":"","what":"New features: a major update to Wald_test()","title":"clubSandwich 0.5.0","text":"Wald_test() now uses new helper functions constrain_zero(), constrain_equal(), constrain_pairwise() specify constraint matrices. Wald_test() gains argument tidy. TRUE, results list tests tidied single data.frame. Output Wald_test() now includes numerator denominator degrees freedom.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"minor-improvements-and-bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"clubSandwich 0.5.0","text":"Corrected bug methods plm objects, occurred “within” models included cluster-level interactions. Previously main effects cluster-level variables getting dropped model_matrix.plm(). Corrected bugs methods robu objects Corrected bug previously led errors models one column model matrix (.e., intercept-models). Corrected bug internal function previously led errors constrain_equal() constrain_zero() called robu objects.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-042","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.4.2","title":"clubSandwich 0.4.2","text":"CRAN release: 2020-04-17 Updated streamlined unit tests R 4.0.0.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-041","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.4.1","title":"clubSandwich 0.4.1","text":"CRAN release: 2020-01-28 Updated unit tests satisfy obscure CRAN checks.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-040","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.4.0","title":"clubSandwich 0.4.0","text":"CRAN release: 2019-12-18 Added methods lmerMod objects fitted lme4::lmer(). Updated internals use inherits() instead checking class() directly.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-035","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.3.5","title":"clubSandwich 0.3.5","text":"CRAN release: 2019-05-14 Added t statistics output coef_test(). Fixed bug get_index_order(), internal function used plm objects. Previously, function assumed individual time indices specified plm call. new function works even zero one indices specified.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-033","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.3.3","title":"clubSandwich 0.3.3","text":"CRAN release: 2019-01-24 impute_covariance_matrix() now drops unobserved factor levels. updated method handling residuals rma.uni rma.mv objects, consistency metafor 2.1-0.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-032","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.3.2","title":"clubSandwich 0.3.2","text":"CRAN release: 2018-05-21 Added conf_int() provide easy cluster-robust confidence intervals. Added examples documentation conf_int() coef_test().","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-031","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.3.1","title":"clubSandwich 0.3.1","text":"CRAN release: 2018-04-04 Added coefs option coef_test() allow testing subsets coefficients. Updated tests use carData instead car package.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-030","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.3.0","title":"clubSandwich 0.3.0","text":"CRAN release: 2017-11-13 Added methods ivreg objects. Added methods mlm objects. Updated residuals_CS.plm account changes plm 1.6-6.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-023","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.2.3","title":"clubSandwich 0.2.3","text":"CRAN release: 2017-08-10","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"new-features-0-2-3","dir":"Changelog","previous_headings":"","what":"New features","title":"clubSandwich 0.2.3","text":"Added methods glm objects. Provide facility cluster higher level highest random effects lme gls objects. Added impute_covariance_matrix() utility function multivariate meta-analysis.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-3","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"clubSandwich 0.2.3","text":"Updated methods plm objects account changes plm 1.6-6. Added documentation type options vcovCR(). Added examples vcovCR() methods.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-022","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.2.2","title":"clubSandwich 0.2.2","text":"CRAN release: 2016-12-01","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"New features","title":"clubSandwich 0.2.2","text":"Added bread() methods supported model classes. vcovCR() now calculated using bread(), carries attributes bread, est_mat, adjustment matrices. vcovCR() gains form argument obtain just meat sandwich, use user-specified bread matrix.","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"clubSandwich 0.2.2","text":"Refactored internal functions degrees freedom calculation improve speed memory usage. Bug fixes: updated nobs.plm() method handle first-differenced models","code":""},{"path":"http://jepusto.github.io/clubSandwich/news/index.html","id":"clubsandwich-021","dir":"Changelog","previous_headings":"","what":"clubSandwich 0.2.1","title":"clubSandwich 0.2.1","text":"CRAN release: 2016-07-23 First version released CRAN.","code":""}]
